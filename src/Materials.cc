/*
 * Materials.cpp
 *
 *  Created on: Nov 16, 2020
 *      Author: petrstepanov
 */

#include <G4SystemOfUnits.hh>
#include <Elements.hh>
#include <G4ios.hh>
#include <G4MaterialPropertiesTable.hh>
#include <G4NistManager.hh>
#include <G4PhysicsVector.hh>
#include <G4String.hh>
#include <G4Types.hh>
#include <G4Utils.hh>
#include <Materials.hh>
#include <stdlib.h>
#include <TAttMarker.h>
#include <TString.h>
//#include <TVectorDfwd.h>
#include <TSystem.h>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <string>

#include <TSystem.h>
#include <TGraph.h>
#include <TVectorD.h>
#include <TFile.h>

Materials* Materials::fgInstance = nullptr;

Materials::Materials() : fMaterialsList{}
                         // fOpticalPhotonWavelength{400., 440., 480., 520., 560., 600., 640., 680.},
                         // fOpticalPhotonEnergy{}
                         // fCrystalLength(200*mm)
{
  // fMaterialsList.clear();
  // Instantiate elements database
  Elements* elements = Elements::getInstance();

  // VM2000
  G4Material* C10H8O4 = new G4Material("C10H8O4", 1.38*g/cm3, 3);
  C10H8O4->AddElement(elements->getElement("C"), 10);
  C10H8O4->AddElement(elements->getElement("H"), 8);
  C10H8O4->AddElement(elements->getElement("O"), 4);
  fMaterialsList.push_back(C10H8O4);

  // Aluminum
  G4Material* Aluminum = new G4Material("Aluminum", 2.70*g/cm3, 1);
  Aluminum->AddElement(elements->getElement("Al"), 1);
  fMaterialsList.push_back(Aluminum);

  // Frame
  // PS: why frame is made of carbon?
  G4Material* Frame = new G4Material("Frame", 1.55*g/cm3, 1);
  Frame->AddElement(elements->getElement("C"), 1);
  fMaterialsList.push_back(Frame);

  // Mu-metal
  // Wikipedia: composition is approximately 77% nickel, 16% iron, 5% copper, and 2% chromium or molybdenum
  // http://www.mu-metal.com/technical-data.html
  G4Material* MuMetal = new G4Material("MuMetal", 8.7 * g/cm3, 4);
  MuMetal->AddElement(elements->getElement("Ni"), 77 * perCent);
  MuMetal->AddElement(elements->getElement("Fe"), 16 * perCent);
  MuMetal->AddElement(elements->getElement("Cu"), 5 * perCent);
  MuMetal->AddElement(elements->getElement("Cr"), 2 * perCent);
  fMaterialsList.push_back(MuMetal);

  // ASCII font
  // https://fsymbols.com/generators/carty/

  // █░█ ▄▀█ █▀▀ █░█ █░█ █▀▄▀█
  // ▀▄▀ █▀█ █▄▄ █▄█ █▄█ █░▀░█

  // Vacuum how-to: http://hurel.hanyang.ac.kr/Geant4/Doxygen/10.03/html/d2/dd7/_d_m_x_detector_material_8icc_source.html
  {
    G4Material* material = new G4Material("vacuum", 1., 1.*g/mole, 1.e-20*g/cm3, kStateGas, 0.1*kelvin, 1.e-20*bar);
    G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();

    // Refractive Index of Vacuum
    std::vector<G4double> rIndex = {200, 1., 800, 1.};
    G4MaterialPropertyVector* rIndexMPV = nmToMPV(rIndex);
    mpt->AddProperty("RINDEX", rIndexMPV, true);

    // Absorption length of Vacuum
    std::vector<G4double> absLength  = {200, 1000*km, 800, 1000*km};
    G4MaterialPropertyVector* absLengthMPV = nmToMPV(absLength);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    // mpt->DumpTable();
    material->SetMaterialPropertiesTable(mpt);

    printMaterialProperties(material);
    fMaterialsList.push_back(material);
    // saveMaterial(material);
  }


  // ▄▀█ █ █▀█
  // █▀█ █ █▀▄

  G4Material* air = new G4Material("air", 1.205*mg/cm3, 2, kStateGas, 293*kelvin, 1*atmosphere);
  air->AddElement(elements->getElement("N"), 0.7);
  air->AddElement(elements->getElement("O"), 0.3);

  {
    G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();

    // Refractive Index of Air
    // https://refractiveindex.info/?shelf=other&book=air&page=Ciddor
    std::vector<G4double> rIndex = { 400, 1.00028276, 440, 1.00028091, 480, 1.00027954, 520, 1.00027848, 560, 1.00027765, 600, 1.00027698, 640, 1.00027644, 680, 1.00027600};
    G4MaterialPropertyVector* rIndexMPV = nmToMPV(rIndex);
    mpt->AddProperty("RINDEX", rIndexMPV, true);

    // Absorption length of Air
    // https://web.physik.rwth-aachen.de/~hebbeker/theses/dietz-laursonn_phd.pdf
    std::vector<G4double> absLength  = {400, 50*m, 680, 50*m};
    G4MaterialPropertyVector* absLengthMPV = nmToMPV(absLength);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    // mpt->DumpTable();
    air->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(air);
  fMaterialsList.push_back(air);
  // saveMaterial(air);

  // ▀█▀ █▀▀ █▀▀ █░░ █▀█ █▄░█
  // ░█░ ██▄ █▀░ █▄▄ █▄█ █░▀█

  G4Material* teflon = G4NistManager::Instance()->FindOrBuildMaterial("G4_TEFLON");
  {
    G4MaterialPropertiesTable *mpt = new G4MaterialPropertiesTable();
    // Refrafctive index taken from this paper for AF1601
    // https://engineering.case.edu/centers/sdle/sites/engineering.case.edu.centers.sdle/files/optical_properties_of_teflon_r_af_amorphous_fluo.pdf
    std::vector<G4double> rIndex = { 145.861, 1.399, 149.377, 1.427, 153.114, 1.430, 156.996, 1.417, 161.099, 1.399, 165.348, 1.388, 179.780, 1.364, 180.162, 1.344, 203.017, 1.328, 232.905, 1.318, 264.551, 1.312, 301.471, 1.308, 354.214, 1.305, 459.701, 1.301, 653.092, 1.297, 955.486, 1.295, 1379.190, 1.292, 1549.726, 1.292 };
    G4MaterialPropertyVector *rIndexMPV = nmToMPV(rIndex);
    mpt->AddProperty("RINDEX", rIndexMPV, true);

    std::vector<G4double> absLength = {157.902, 1/4513.216*cm, 159.285, 1/3295.154*cm, 161.524, 1/2200.441*cm, 164.224, 1/1321.586*cm, 168.636, 1/674.009*cm, 174.167, 1/303.965*cm, 181.477, 1/165.198*cm, 187.404, 1/134.361*cm, 195.108, 1/72.687*cm, 206.105, 1/41.850*cm, 220, 1/1*cm};
    G4MaterialPropertyVector* absLengthMPV = nmToMPV(absLength);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    // TODO: add emission p. 321
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    teflon->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(teflon);
  fMaterialsList.push_back(teflon);
  // saveMaterial(teflon);

  // █▄▄ █▀▀ ▄▄ █▄▄ ▀▀█ █▀█
  // █▄█ █▄▄ ░░ █▄█ ▄██ █▄█

  // Composition: https://www.crystals.saint-gobain.com/sites/imdf.crystals.com/files/documents/bc-630.pdf
  G4Material* bc630 = new G4Material("BC630", 1.04*g/cm3, 4, kStateLiquid);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("C"), 2);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("H"), 6);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 1);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);

  G4MaterialPropertiesTable* bc630MPT = new G4MaterialPropertiesTable();

  // Found nice article here: https://sci-hub.do/10.3390/s20216092
  std::vector<G4double> refractiveIndexBC630 = {350, 1.465, 650, 1.465};
  G4MaterialPropertyVector* refractiveIndexBC630MPV = nmToMPV(refractiveIndexBC630);
  bc630MPT->AddProperty("RINDEX", refractiveIndexBC630MPV, true);

  std::vector<G4double> absorptionLengthBC630 = {350, 1/0.004*cm,
                                                 400, 1/0.002*cm,
                                                 450, 1/0.001*cm,
                                                 650, 1/0.0005*cm};
  G4MaterialPropertyVector* absorptionLengthBC630MPV = nmToMPV(absorptionLengthBC630);
  bc630MPT->AddProperty("ABSLENGTH", absorptionLengthBC630MPV, true);
  // bc630MPT->DumpTable();
  bc630->SetMaterialPropertiesTable(bc630MPT);

  printMaterialProperties(bc630);
  fMaterialsList.push_back(bc630);
  // saveMaterial(bc630);

  // █▀█ █▀▄ █▀▄▀█ █▀   █▀▀ █▀█ █▀▀ ▄▀█ █▀ █▀▀
  // █▀▀ █▄▀ █░▀░█ ▄█   █▄█ █▀▄ ██▄ █▀█ ▄█ ██▄

  // Some documentation on the polydimethylsiloxane grease: https://arxiv.org/pdf/1305.3010.pdf
  G4Material* grease = new G4Material("PDMS", 0.97*g/cm3, 4, kStateLiquid);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("C"), 2);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("H"), 6);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 1);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);

  // Data digitized from: https://sci-hub.do/https://doi.org/10.1116/1.5046735
  // Array taken from here: https://refractiveindex.info/?shelf=organic&book=polydimethylsiloxane&page=Gupta
  // Simply export n(eV) to CSV and copy here
  std::vector<G4double> refractiveIndexGrease = {0.7336342451662705,1.403767,0.734721110714665,1.40377,0.7358112013833811,1.403773,0.7369045315488838,1.403775,0.7380011156732126,1.403778,0.7391009683046182,1.403781,0.7402041040782072,1.403783,0.7413105377165902,1.403786,0.7424202840305373,1.403789,0.7435333579196385,1.403792,0.7446497743729712,1.403795,0.7457695484697726,1.403797,0.7468926953801188,1.4038,0.7480192303656091,1.403803,0.7491491687800587,1.403806,0.7502825260701949,1.403809,0.751419317776362,1.403811,0.7525595595332304,1.403814,0.7537032670705149,1.403817,0.7548504562136968,1.40382,0.7560011428847544,1.403823,0.757155343102899,1.403826,0.7583130729853194,1.403829,0.7594743487479308,1.403832,0.7606391867061333,1.403835,0.7618076032755743,1.403838,0.7629796149729213,1.403841,0.7641552384166392,1.403844,0.765334490327776,1.403847,0.7665173875307556,1.40385,0.7677039469541778,1.403853,0.7688941856316261,1.403856,0.7700881207024827,1.403859,0.771285769412751,1.403862,0.7724871491158861,1.403865,0.7736922772736331,1.403868,0.7749011714568732,1.403871,0.7761138493464771,1.403875,0.7773303287341675,1.403878,0.7785506275233891,1.403881,0.7797747637301868,1.403884,0.7810027554840927,1.403887,0.7822346210290203,1.403891,0.7834703787241688,1.403894,0.7847100470449349,1.403897,0.7859536445838334,1.4039,0.7872011900514267,1.403904,0.7884527022772637,1.403907,0.7897082002108262,1.40391,0.7909677029224863,1.403914,0.792231229604471,1.403917,0.7934987995718381,1.40392,0.7947704322634597,1.403924,0.7960461472430158,1.403927,0.7973259641999982,1.403931,0.7986099029507228,1.403934,0.7998979834393529,1.403938,0.8011902257389318,1.403941,0.8024866500524254,1.403944,0.8037872767137745,1.403948,0.8050921261889592,1.403952,0.8064012190770713,1.403955,0.8077145761113989,1.403959,0.8090322181605202,1.403962,0.8103541662294099,1.403966,0.8116804414605545,1.40397,0.8130110651350801,1.403973,0.8143460586738898,1.403977,0.8156854436388139,1.40398,0.8170292417337707,1.403984,0.8183774748059387,1.403988,0.8197301648469403,1.403992,0.8210873339940379,1.403995,0.8224490045313414,1.403999,0.823815198891028,1.404003,0.8251859396545739,1.404007,0.8265612495539981,1.404011,0.82794115147312,1.404014,0.8293256684488275,1.404018,0.8307148236723599,1.404022,0.8321086404906021,1.404026,0.833507142407393,1.40403,0.8349103530848465,1.404034,0.8363182963446861,1.404038,0.8377309961695927,1.404042,0.8391484767045666,1.404046,0.8405707622583031,1.40405,0.8419978773045821,1.404054,0.8434298464836716,1.404058,0.8448666946037459,1.404062,0.8463084466423189,1.404067,0.8477551277476904,1.404071,0.849206763240409,1.404075,0.8506633786147493,1.404079,0.8521249995402042,1.404083,0.8535916518629929,1.404088,0.8550633616075842,1.404092,0.8565401549782363,1.404096,0.8580220583605516,1.4041,0.8595090983230483,1.404105,0.861001301618748,1.404109,0.8624986951867806,1.404114,0.8640013061540049,1.404118,0.8655091618366472,1.404122,0.867022289741956,1.404127,0.8685407175698754,1.404131,0.8700644732147348,1.404136,0.8715935847669575,1.40414,0.8731280805147867,1.404145,0.8746679889460297,1.404149,0.8762133387498213,1.404154,0.877764158818405,1.404159,0.8793204782489342,1.404163,0.8808823263452911,1.404168,0.8824497326199268,1.404173,0.8840227267957198,1.404178,0.8856013388078552,1.404182,0.8871855988057225,1.404187,0.8887755371548366,1.404192,0.890371184438777,1.404197,0.891972571461149,1.404202,0.8935797292475656,1.404207,0.8951926890476514,1.404211,0.8968114823370684,1.404216,0.8984361408195632,1.404221,0.900066696429036,1.404226,0.9017031813316343,1.404231,0.9033456279278668,1.404236,0.9049940688547423,1.404242,0.9066485369879321,1.404247,0.908309065443954,1.404252,0.9099756875823832,1.404257,0.9116484370080861,1.404262,0.9133273475734786,1.404268,0.9150124533808097,1.404273,0.916703788784471,1.404278,0.9184013883933312,1.404283,0.9201052870730962,1.404289,0.9218155199486968,1.404294,0.9235321224067018,1.4043,0.925255130097759,1.404305,0.9269845789390634,1.404311,0.9287205051168518,1.404316,0.9304629450889285,1.404322,0.9322119355872158,1.404327,0.9339675136203369,1.404333,0.9357297164762243,1.404339,0.9374985817247615,1.404344,0.9392741472204523,1.40435,0.9410564511051213,1.404356,0.9428455318106442,1.404362,0.9446414280617121,1.404367,0.9464441788786238,1.404373,0.9482538235801125,1.404379,0.9500704017862047,1.404385,0.951893953421111,1.404391,0.9537245187161516,1.404397,0.9555621382127145,1.404403,0.9574068527652488,1.404409,0.9592587035442918,1.404415,0.9611177320395327,1.404422,0.9629839800629103,1.404428,0.9648574897517488,1.404434,0.9667383035719276,1.40444,0.9686264643210915,1.404447,0.970522015131896,1.404453,0.9724249994752919,1.404459,0.9743354611638485,1.404466,0.9762534443551159,1.404472,0.9781789935550272,1.404479,0.9801121536213416,1.404485,0.9820529697671265,1.404492,0.9840014875642834,1.404499,0.985957752947115,1.404505,0.987921812215934,1.404512,0.9898937120407163,1.404519,0.9918734994647977,1.404526,0.9938612219086149,1.404532,0.9958569271734916,1.404539,0.9978606634454705,1.404546,0.9998724792991912,1.404553,1.0018924237018159,1.40456,1.0039205460170015,1.404567,1.0059568960089227,1.404575,1.0080015238463391,1.404582,1.0100544801067186,1.404589,1.0121158157804058,1.404596,1.0141855822748442,1.404603,1.0162638314188501,1.404611,1.0183506154669382,1.404618,1.0204459871037013,1.404626,1.0225499994482452,1.404633,1.0246627060586753,1.404641,1.0267841609366435,1.404648,1.0289144185319479,1.404656,1.031053533747191,1.404664,1.0332015619424977,1.404672,1.0353585589402898,1.404679,1.037524581030123,1.404687,1.0396996849735827,1.404695,1.0418839280092413,1.404703,1.0440773678576818,1.404711,1.0462800627265798,1.404719,1.0484920713158536,1.404727,1.050713452822879,1.404735,1.0529442669477682,1.404744,1.055184573898721,1.404752,1.057434434397439,1.40476,1.059693909684613,1.404769,1.0619630615254794,1.404777,1.064241952215448,1.404786,1.0665306445858038,1.404794,1.0688292020094803,1.404803,1.071137688406909,1.404812,1.0734561682519455,1.40482,1.0757847065778716,1.404829,1.078123368983476,1.404838,1.0804722216392133,1.404847,1.0828313312934472,1.404856,1.085200765278772,1.404865,1.0875805915184187,1.404874,1.0899708785327449,1.404884,1.0923716954458125,1.404893,1.0947831119920504,1.404902,1.0972051985230065,1.404912,1.0996380260141883,1.404921,1.1020816660719974,1.40493,1.1045361909407547,1.40494,1.1070016735098187,1.40495,1.1094781873208028,1.40496,1.1119658065748854,1.404969,1.1144646061402221,1.404979,1.1169746615594567,1.404989,1.1194960490573338,1.404999,1.1220288455484138,1.405009,1.1245731286448952,1.405019,1.1271289766645427,1.40503,1.1296964686387219,1.40504,1.1322756843205453,1.40505,1.1348667041931324,1.405061,1.137469609477979,1.405071,1.1400844821434457,1.405082,1.1427114049133615,1.405093,1.145350461275748,1.405104,1.1480017354916638,1.405114,1.1506653126041737,1.405125,1.1533412784474393,1.405136,1.1560297196559415,1.405148,1.1587307236738291,1.405159,1.1614443787644002,1.40517,1.1641707740197156,1.405181,1.1669099993703502,1.405193,1.1696621455952803,1.405204,1.172427304331912,1.405216,1.1752055680862532,1.405228,1.1779970302432277,1.40524,1.1808017850771402,1.405252,1.1836199277622883,1.405264,1.1864515543837293,1.405276,1.1892967619481987,1.405288,1.1921556483951896,1.4053,1.19502831260819,1.405312,1.1979148544260843,1.405325,1.2008153746547188,1.405337,1.2037299750786379,1.40535,1.2066587584729898,1.405363,1.2096018286156072,1.405376,1.2125592902992637,1.405389,1.2155312493441148,1.405402,1.2185178126103164,1.405415,1.2215190880108346,1.405428,1.2245351845244417,1.405442,1.227566212208908,1.405455,1.2306122822143892,1.405469,1.2336735067970122,1.405483,1.2367499993326656,1.405496,1.2398418743309971,1.40551,1.2410829572882853,1.405516,1.2423265273857687,1.405522,1.243572592107319,1.405527,1.2448211589668645,1.405533,1.2460722355085398,1.405539,1.247325829306838,1.405544,1.2485819479667646,1.40555,1.2498405991239891,1.405556,1.2511017904450021,1.405562,1.2523655296272698,1.405567,1.2536318243993905,1.405573,1.254900682521252,1.405579,1.2561721117841915,1.405585,1.2574461200111533,1.405591,1.2587227150568499,1.405596,1.2600019048079238,1.405602,1.26128369718311,1.405608,1.2625681001333984,1.405614,1.263855121642199,1.40562,1.2651447697255074,1.405626,1.2664370524320707,1.405632,1.2677319778435554,1.405638,1.2690295540747156,1.405644,1.2703297892735628,1.40565,1.2716326916215355,1.405656,1.2729382693336726,1.405662,1.2742465306587842,1.405669,1.2755574838796266,1.405675,1.2768711373130763,1.405681,1.2781874993103064,1.405687,1.279506578256963,1.405693,1.2808283825733442,1.405699,1.2821529207145783,1.405706,1.2834802011708044,1.405712,1.2848102324673545,1.405718,1.286143023164935,1.405725,1.2874785818598102,1.405731,1.2888169171839887,1.405737,1.290158037805408,1.405744,1.2915019524281222,1.40575,1.2928486697924892,1.405756,1.2941981986753623,1.405763,1.2955505478902791,1.405769,1.296905726287654,1.405776,1.2982637427549708,1.405782,1.2996246062169783,1.405789,1.3009883256358836,1.405795,1.3023549100115517,1.405802,1.3037243683817006,1.405809,1.3050967098221022,1.405815,1.306471943446783,1.405822,1.307850078408225,1.405828,1.3092311238975682,1.405835,1.3106150891448174,1.405842,1.3120019834190446,1.405849,1.3133918160285987,1.405855,1.314784596321312,1.405862,1.3161803336847104,1.405869,1.3175790375462244,1.405876,1.3189807173734012,1.405883,1.3203853826741185,1.40589,1.3217930429967988,1.405896,1.3232037079306265,1.405903,1.324617387105766,1.40591,1.3260340901935797,1.405917,1.3274538269068492,1.405924,1.3288766069999969,1.405931,1.3303024402693102,1.405938,1.3317313365531656,1.405945,1.333163305732255,1.405952,1.334598357729814,1.40596,1.3360365025118504,1.405967,1.3374777500873756,1.405974,1.3389221105086362,1.405981,1.3403695938713482,1.405988,1.341820210314932,1.405995,1.3432739700227487,1.406003,1.3447308832223395,1.40601,1.3461909601856645,1.406017,1.3476542112293446,1.406025,1.3491206467149044,1.406032,1.3505902770490164,1.40604,1.3520631126837481,1.406047,1.353539164116809,1.406054,1.3550184418918,1.406062,1.3565009565984651,1.40607,1.357986718872943,1.406077,1.359475739398023,1.406085,1.3609680289033996,1.406092,1.3624635981659308,1.4061,1.3639624580098977,1.406107,1.3654646193072655,1.406115,1.366970092977946,1.406123,1.368478889990063,1.406131,1.3699910213602178,1.406138,1.371506498153758,1.406146,1.3730253314850467,1.406154,1.3745475325177352,1.406162,1.3760731124650356,1.40617,1.3776020825899968,1.406178,1.379134454205781,1.406186,1.3806702386759433,1.406193,1.3822094474147124,1.406201,1.3837520918872737,1.406209,1.3852981836100526,1.406218,1.3868477341510035,1.406226,1.388400755129896,1.406234,1.3899572582186066,1.406242,1.391517255141411,1.40625,1.3930807576752777,1.406258,1.3946477776501656,1.406267,1.3962183269493211,1.406275,1.3977924175095797,1.406283,1.399370061321667,1.406291,1.4009512704305052,1.4063,1.4025360569355172,1.406308,1.4041244329909368,1.406317,1.405716410806119,1.406325,1.4073120026458537,1.406334,1.4089112208306787,1.406342,1.410514077737198,1.406351,1.4121205857984023,1.406359,1.4137307575039877,1.406368,1.4153446054006817,1.406376,1.4169621420925682,1.406385,1.4185833802414154,1.406394,1.420208332567007,1.406403,1.4218370118474737,1.406411,1.4234694309196294,1.40642,1.425105602679307,1.406429,1.4267455400816997,1.406438,1.4283892561417018,1.406447,1.4300367639342528,1.406456,1.4316880765946849,1.406465,1.433343207319072,1.406474,1.43500216936458,1.406483,1.436664976049823,1.406492,1.4383316407552171,1.406501,1.4400021769233415,1.40651,1.441676598059299,1.406519,1.4433549177310794,1.406529,1.4450371495699268,1.406538,1.4467233072707084,1.406547,1.4484134045922863,1.406557,1.4501074553578914,1.406566,1.4518054734555002,1.406575,1.4535074728382147,1.406585,1.4552134675246446,1.406594,1.4569234715992916,1.406604,1.4586374992129378,1.406613,1.4603555645830355,1.406623,1.4620776819941004,1.406633,1.4638038657981076,1.406642,1.4655341304148903,1.406652,1.467268490332541,1.406662,1.4690069601078166,1.406672,1.4707495543665448,1.406681,1.4724962878040346,1.406691,1.4742471751854902,1.406701,1.4760022313464252,1.406711,1.4777614711930835,1.406721,1.4795249097028607,1.406731,1.481292561924728,1.406741,1.4830644429796618,1.406751,1.4848405680610746,1.406762,1.4866209524352485,1.406772,1.4884056114417734,1.406782,1.490194560493987,1.406792,1.491987815079419,1.406803,1.4937853907602376,1.406813,1.4955873031737,1.406823,1.4973935680326054,1.406834,1.4992042011257523,1.406844,1.5010192183183986,1.406855,1.502838635552724,1.406865,1.5046624688482975,1.406876,1.5064907343025482,1.406887,1.5083234480912375,1.406897,1.510160626468937,1.406908,1.5120022857695088,1.406919,1.51384844240659,1.40693,1.5156991128740798,1.40694,1.5175543137466305,1.406951,1.5194140616801437,1.406962,1.5212783734122666,1.406973,1.523147265762896,1.406984,1.5250207556346829,1.406996,1.5268988600135431,1.407007,1.5287815959691702,1.407018,1.530668980655552,1.407029,1.5325610313114921,1.40704,1.5344577652611349,1.407052,1.5363591999144945,1.407063,1.5382653527679864,1.407075,1.5401762414049653,1.407086,1.542091883496265,1.407098,1.5440122968007435,1.407109,1.5459374991658317,1.407121,1.5478675085280862,1.407133,1.5498023429137464,1.407144,1.5517420204392955,1.407156,1.5536865593120264,1.407168,1.555635977830611,1.40718,1.5575902943856748,1.407192,1.5595495274603737,1.407204,1.5615136956309787,1.407216,1.5634828175674615,1.407228,1.565456912034087,1.40724,1.567435997890009,1.407252,1.5694200940898697,1.407264,1.571409219684407,1.407277,1.5734033938210623,1.407289,1.575402635744596,1.407301,1.5774069647977063,1.407314,1.5794164004216524,1.407326,1.581430962156884,1.407339,1.5834506696436745,1.407351,1.5854755426227585,1.407364,1.5875056009359758,1.407377,1.5895408645269193,1.40739,1.5915813534415881,1.407402,1.593627087829045,1.407415,1.595678087942081,1.407428,1.5977343741378829,1.407441,1.5997959668787058,1.407454,1.6018628867325544,1.407467,1.6039351543738642,1.407481,1.6060127905841932,1.407494,1.6080958162529144,1.407507,1.6101842523779184,1.40752,1.612278120066316,1.407534,1.6143774405351525,1.407547,1.6164822351121213,1.407561,1.6185925252362887,1.407574,1.6207083324588198,1.407588,1.6228296784437135,1.407602,1.6249565849685415,1.407616,1.627089073925193,1.407629,1.629227167320627,1.407643,1.6313708872776278,1.407657,1.6335202560355693,1.407671,1.6356752959511835,1.407685,1.6378360294993357,1.407699,1.6400024792738057,1.407714,1.6421746679880758,1.407728,1.6443526184761235,1.407742,1.6465363536932234,1.407757,1.6487258967167515,1.407771,1.6509212707470002,1.407786,1.6531224991079962,1.4078,1.6553296052483273,1.407815,1.6575426127419748,1.40783,1.6597615452891528,1.407844,1.6619864267171542,1.407859,1.6642172809812041,1.407874,1.6664541321653188,1.407889,1.6686970044831724,1.407904,1.670945922278972,1.40792,1.6732009100283363,1.407935,1.6754619923391854,1.40795,1.6777291939526349,1.407965,1.6800025397438987,1.407981,1.6822820547231983,1.407996,1.684567764036681,1.408012,1.6868596929673432,1.408028,1.6891578669359635,1.408043,1.6914623115020424,1.408059,1.6937730523647503,1.408075,1.6960901153638812,1.408091,1.698413526480818,1.408107,1.7007433118395023,1.408123,1.7030794977074137,1.408139,1.7054221104965572,1.408155,1.707771176764459,1.408172,1.7101267232151685,1.408188,1.7124887767002723,1.408205,1.7148573642199132,1.408221,1.7172325129238188,1.408238,1.7196142501123401,1.408255,1.722002603237496,1.408271,1.7243975999040295,1.408288,1.7267992678704696,1.408305,1.7292076350502052,1.408322,1.731622729512566,1.408339,1.734044579483912,1.408357,1.7364732133487355,1.408374,1.7389086596507675,1.408391,1.741350947094097,1.408409,1.7438001045443,1.408426,1.7462561610295735,1.408444,1.748719145741886,1.408462,1.7511890880381316,1.408479,1.7536660174412972,1.408497,1.7561499636416391,1.408515,1.7586409564978684,1.408533,1.7611390260383484,1.408551,1.7636442024623005,1.40857,1.7661565161410218,1.408588,1.7686759976191115,1.408606,1.7712026776157104,1.408625,1.773736587025747,1.408643,1.7762777569211994,1.408662,1.7788262185523633,1.408681,1.7813820033491339,1.4087,1.783945142922298,1.408719,1.7865156690648374,1.408738,1.7890936137532427,1.408757,1.79167900914884,1.408776,1.7942718875991277,1.408796,1.7968722816391265,1.408815,1.799480223992739,1.408835,1.802095747574124,1.408854,1.8047188854890786,1.408874,1.8073496710364387,1.408894,1.8099881377094846,1.408914,1.8126343191973642,1.408934,1.8152882493865257,1.408954,1.8179499623621658,1.408975,1.8206194924096872,1.408995,1.8232968740161721,1.409015,1.825982141871866,1.409036,1.828675330871677,1.409057,1.8313764761166869,1.409078,1.8340856129156762,1.409098,1.8368027767866624,1.409119,1.8395280034584527,1.409141,1.8422613288722096,1.409162,1.8450027891830314,1.409183,1.8477524207615454,1.409205,1.850510260195518,1.409226,1.8532763442914755,1.409248,1.8560507100763428,1.40927,1.858833394799096,1.409292,1.861624435932428,1.409314,1.8644238711744316,1.409336,1.8672317384502968,1.409358,1.8700480759140228,1.40938,1.8728729219501465,1.409403,1.8757063151754871,1.409425,1.8785482944409047,1.409448,1.8813988988330759,1.409471,1.8842581676762873,1.409494,1.887126140534242,1.409517,1.8900028572118859,1.40954,1.8928883577572475,1.409564,1.8957826824632984,1.409587,1.8986858718698272,1.409611,1.9015979667653329,1.409635,1.9045190081889356,1.409658,1.9074490374323032,1.409682,1.910388096041598,1.409706,1.91333622581944,1.409731,1.916293468826889,1.409755,1.9192598673854444,1.40978,1.9222354640790653,1.409804,1.9252203017562066,1.409829,1.9282144235318772,1.409854,1.9312178727897151,1.409879,1.934230693184083,1.409904,1.937252928642183,1.40993,1.9402846233661926,1.409955,1.9433258218354186,1.409981,1.9463765688084727,1.410007,1.949436909325467,1.410032,1.9525068887102317,1.410058,1.9555865525725507,1.410085,1.958675946810422,1.410111,1.9617751176123372,1.410138,1.9648841114595834,1.410164,1.9680029751285668,1.410191,1.9711317556931591,1.410218,1.9742705005270655,1.410245,1.9774192573062155,1.410272,1.9805780740111776,1.4103,1.9837469989295955,1.410327,1.9869260806586493,1.410355,1.9901153681075396,1.410383,1.9933149104999954,1.410411,1.996524757376807,1.410439,1.9997449585983824,1.410467,2.00297556434733,1.410496,2.006216625131063,1.410525,2.0094681917844364,1.410553,2.012730315472398,1.410582,2.0160030476926782,1.410612,2.019286440278497,1.410641,2.0225805454013006,1.410671,2.0258854155735246,1.4107,2.0292011036513866,1.41073,2.0325276628377003,1.41076,2.035865146684724,1.41079,2.0392136090970348,1.410821,2.042573104334427,1.410851,2.0459436870148466,1.410882,2.0493254121173505,1.410913,2.052718334985095,1.410944,2.0561225113283537,1.410976,2.05953799722757,1.411007,2.0629648491364345,1.411039,2.0664031238849954,1.411071,2.0698528786828,1.411103,2.073314171122069,1.411135,2.0767870591808997,1.411168,2.0802716012265052,1.4112,2.0837678560184827,1.411233,2.0872758827121163,1.411266,2.0907957408617155,1.411299,2.0943274904239817,1.411333,2.0978711917614166,1.411366,2.101426905645758,1.4114,2.1049946932614554,1.411434,2.1085746162091787,1.411469,2.112166736509365,1.411503,2.115771116605797,1.411538,2.119387819369226,1.411573,2.1230169081010226,1.411608,2.1266584465368736,1.411643,2.1303124988505107,1.411679,2.133979129657482,1.411715,2.1376584040189606,1.411751,2.1413503874455913,1.411787,2.145055145901379,1.411824,2.1487727458076207,1.41186,2.15250325404687,1.411897,2.156246737966952,1.411934,2.1600032653850127,1.411972,2.1637729045916183,1.412009,2.1675557243548904,1.412047,2.1713517939246887,1.412085,2.1751611830368374,1.412124,2.1789839619173943,1.412162,2.182820201286967,1.412201,2.1866699723650744,1.41224,2.1905333468745534,1.41228,2.194410397046013,1.412319,2.1983011956223355,1.412359,2.202205815863228,1.412399,2.206124331549817,1.41244,2.2100568169892996,1.41248,2.2140033470196374,1.412521,2.217963997014306,1.412562,2.2219388428870914,1.412604,2.2259279610969425,1.412646,2.2299314286528724,1.412688,2.2339493231189134,1.41273,2.237981722619128,1.412772,2.242028705842671,1.412815,2.2460903520489075,1.412858,2.25016674107259,1.412902,2.2542579533290854,1.412946,2.2583640698196668,1.41299,2.2624851721368557,1.413034,2.26662134246983,1.413078,2.270772663609885,1.413123,2.274939218955958,1.413169,2.279121092520215,1.413214,2.283318368933696,1.41326,2.287531133452024,1.413306,2.2917594719611776,1.413352,2.2960034709833277,1.413399,2.3002632176827404,1.413446,2.3045387998717417,1.413494,2.308830306016754,1.413541,2.3131378252443975,1.413589,2.3174614473476582,1.413638,2.321801262792129,1.413686,2.326157362722321,1.413736,2.33052983896804,1.413785,2.334918784050842,1.413835,2.3393242911905605,1.413885,2.3437464543119035,1.413935,2.348185368051131,1.413986,2.3526411277628028,1.414037,2.3571138295266105,1.414089,2.3616035701542804,1.41414,2.3661104471965593,1.414193,2.370634558950281,1.414245,2.3751760044655117,1.414298,2.3797348835527776,1.414352,2.3843112967903792,1.414405,2.388905345531786,1.414459,2.393517131913122,1.414514,2.3981467588607295,1.414569,2.4027943300988315,1.414624,2.4074599501572758,1.41468,2.412143724379372,1.414736,2.416845758929819,1.414793,2.421566160802729,1.41485,2.42630503782974,1.414907,2.4310624986882297,1.414965,2.435838652909621,1.415023,2.4406336108877897,1.415081,2.4454474838875684,1.415141,2.450280384053354,1.4152,2.455132424417816,1.41526,2.4600037189107087,1.41532,2.4648943823677874,1.415381,2.469804530539835,1.415442,2.474734280101791,1.415504,2.4796837486619943,1.415566,2.4846530547715373,1.415629,2.489642317933729,1.415692,2.494651658613676,1.415756,2.4996811982479783,1.41582,2.5047310592545395,1.415884,2.509801365042504,1.41595,2.5148922400223066,1.416015,2.5200038096158477,1.416081,2.5251362002667967,1.416148,2.5302895394510148,1.416215,2.535463955687111,1.416283,2.5406595785471255,1.416351,2.545876538667345,1.41642,2.5511149677592533,1.416489,2.556374998620613,1.416558,2.5616567651466884,1.416629,2.566960402341609,1.4167,2.57228604632987,1.416771,2.5776338343679774,1.416843,2.5830039048562443,1.416916,2.5883963973507247,1.416989,2.593811452575308,1.417062,2.5992492124339566,1.417137,2.6047098200231034,1.417212,2.6101934196442045,1.417287,2.61570015681645,1.417363,2.621230178289635,1.41744,2.6267836320571973,1.417517,2.632360667369421,1.417595,2.6379614347468023,1.417674,2.6435860859935976,1.417753,2.649234774211532,1.417833,2.6549076538136984,1.417913,2.6606048805386204,1.417994,2.66632661146451,1.418076,2.6720730050237007,1.418159,2.6778442210172724,1.418242,2.683640420629864,1.418326,2.689461766444679,1.418411,2.695308422458689,1.418496,2.7011805540980327,1.418582,2.707078328233618,1.418669,2.7130019131969303,1.418756,2.718951478796046,1.418844,2.7249271963318615,1.418933,2.730929238614531,1.419023,2.736957779980126,1.419114,2.743012996307516,1.419205,2.7490950650354704,1.419297,2.7552041651799937,1.41939,2.7613404773518866,1.419483,2.7675041837745473,1.419578,2.773695468302007,1.419673,2.779914516437213,1.419769,2.7861615153505555,1.419866,2.7924366538986423,1.419964,2.798740122643334,1.420062,2.8050721138710344,1.420162,2.811432821612238,1.420262,2.8178224416613573,1.420363,2.8242411715968045,1.420465,2.8306892108013635,1.420568,2.837166760482831,1.420672,2.8436740236949474,1.420777,2.850211205358614,1.420883,2.8567785122834035,1.42099,2.8633761531893698,1.421097,2.87000433872916,1.421206,2.8766632815104343,1.421316,2.883353196118598,1.421426,2.8900742991398536,1.421538,2.8968268091845726,1.421651,2.9036109469110003,1.421764,2.9104269350492893,1.421879,2.9172749984258757,1.421995,2.9241553639882008,1.422112,2.9310682608297807,1.42223,2.9380139202156332,1.422349,2.9449925756080693,1.422469,2.9520044626928503,1.422591,2.9590498194057213,1.422713,2.9661288859593236,1.422837,2.973241904870497,1.422961,2.980389120987974,1.423087,2.9875707815204753,1.423215,2.9947871360652107,1.423343,3.002038436636797,1.423473,3.009324937696595,1.423603,3.016646896182475,1.423735,3.0240045715390176,1.423869,3.0313982257481595,1.424003,3.0388281233602874,1.424139,3.046294531525792,1.424277,3.0537977200270863,1.424415,3.061337961311104,1.424555,3.0689155305222697,1.424697,3.0765307055359727,1.424839,3.08418376699253,1.424984,3.0918749983316633,1.425129,3.099604685827493,1.425276,3.1073731186240527,1.425425,3.1151805887713495,1.425575,3.1230273912619575,1.425726,3.130913824068174,1.425879,3.1388401881797394,1.426034,3.1468067876421246,1.42619,3.1548139295954125,1.426348,3.162861924313768,1.426507,3.170951085245517,1.426668,3.1790817290538387,1.426831,3.18725417565809,1.426995,3.1954687482757658,1.427161,3.203725773465109,1.427328,3.2120255811683864,1.427498,3.220368504755837,1.427669,3.228754881070305,1.427842,3.2371850504725774,1.428017,3.245659356887427,1.428194,3.254178147850386,1.428372,3.2627417745552556,1.428553,3.271350591902367,1.428735,3.2800049585476114,1.428919,3.288705236952247,1.429105,3.297451793433503,1.429294,3.3062449982159925,1.429484,3.3150852254839496,1.429676,3.3239728534343085,1.429871,3.3329082643306376,1.430067,3.341891844557944,1.430266,3.3509239846783707,1.430467,3.3600050794877974,1.43067,3.369135528073362,1.430875,3.378315733871927,1.431083,3.3875461047295006,1.431293,3.396827052961636,1.431505,3.4061589954148275,1.43172,3.415542353528918,1.431937,3.4249775534005447,1.432156,3.4344650258476377,1.432378,3.444005206474992,1.432603,3.453598535740939,1.43283,3.463245459025132,1.433059,3.472946426697471,1.433292,3.482701894188194,1.433527,3.492512322059147,1.433764,3.502378176076263,1.434005,3.5122999272832782,1.434248,3.5222780520766968,1.434494,3.5323130322820435,1.434743,3.5424053552314207,1.434995,3.5525555138423988,1.43525,3.5627640066982678,1.435507,3.5730313381296748,1.435768,3.58335801829768,1.436032,3.593744563278253,1.436299,3.604191495148248,1.43657,3.6146993420728775,1.436844,3.6252686383947283,1.43712,3.6358999247243315,1.437401,3.6465937480323443,1.437684,3.657350661743354,1.437972,3.6681712258313524,1.438262,3.6790560069169054,1.438557,3.690005578366063,1.438855,3.701020520391036,1.439156,3.7121014201526856,1.439462,3.723248871864856,1.439771,3.7344634769005935,1.440084,3.745745843900293,1.440401,3.7570965888818093,1.440722,3.7685163353525746,1.441047,3.7800057144237718,1.441376,3.791565364926597,1.44171,3.8031959335306658,1.442047,3.8148980748646064,1.44239,3.82667245163888,1.442736,3.838519734770889,1.443087,3.8504406035124132,1.443443,3.8624357455794303,1.443803,3.874505857284366,1.444168,3.886651643670837,1.444538,3.898873818650934,1.444912,3.9111731051451013,1.445292,3.9235502352246745,1.445677,3.9360059502571336,1.446066,3.948541001054131,1.446462,3.961156148022355,1.446862,3.9738521613172986,1.447268,3.986629820999991,1.447679,3.999489917196765,1.448096,4.012433250262126,1.448519,4.025460630944796,1.448948,4.038572880556994,1.449382,4.051770831147049,1.449823,4.0650553256754005,1.450269,4.0784272181940695,1.450722,4.091887374029693,1.451181,4.10543666997019,1.451647,4.11907599445514,1.452119,4.132806247769991,1.452598};
  G4MaterialPropertyVector* refractiveIndexGreaseMPV = evToMPV(refractiveIndexGrease);

  // Absorption coefficient 0.15344 cm-1 => 6.517205422 cm
  // https://refractiveindex.info/?shelf=organic&book=polydimethylsiloxane&page=Querry-NIR
  std::vector<G4double> absorptionLengthGrease = {0.7336342451662705, 6.517*cm,
                                                  4.132806247769991, 6.517*cm};
  G4MaterialPropertyVector* absorptionLengthGreaseMPV = evToMPV(absorptionLengthGrease);

  G4MaterialPropertiesTable* greaseMPT = new G4MaterialPropertiesTable();
  greaseMPT->AddProperty("RINDEX", refractiveIndexGreaseMPV, true);
  greaseMPT->AddProperty("ABSLENGTH", absorptionLengthGreaseMPV, true);
  // greaseMPT->DumpTable();
  grease->SetMaterialPropertiesTable(greaseMPT);

  printMaterialProperties(grease);
  fMaterialsList.push_back(grease);
  // saveMaterial(grease);

  // █▄▄ █▀█ █▀█ █▀█ █▀ █ █░░ █ █▀▀ ▄▀█ ▀█▀ █▀▀   █▀▀ █░░ ▄▀█ █▀ █▀
  // █▄█ █▄█ █▀▄ █▄█ ▄█ █ █▄▄ █ █▄▄ █▀█ ░█░ ██▄   █▄█ █▄▄ █▀█ ▄█ ▄█

  // ~ 90% SiO2, 10% B2O3: https://en.wikipedia.org/wiki/Borosilicate_glass
  G4Material* SiO2 = G4NistManager::Instance()->FindOrBuildMaterial("G4_SILICON_DIOXIDE");
  G4Material* B2O3 = G4NistManager::Instance()->FindOrBuildMaterial("G4_BORON_OXIDE");
  G4Material* borosilicate = new G4Material("borosilicate", 2.23*g/cm3, 2, kStateSolid);
  borosilicate->AddMaterial(SiO2, 0.9);
  borosilicate->AddMaterial(B2O3, 0.1);

  // https://www.hamamatsu.com/resources/pdf/etd/PMT_handbook_v3aE.pdf
  // Borosilicate window with Bialkali photocathode work within 300-650 nm range, pp.35
  // https://www.hamamatsu.com/jp/en/product/optical-sensors/photodiodes/si-photodiodes/si-photodiode-faq/index.html
  // LXeDetectorConstruction: 1.49

  std::vector<G4double> refractiveIndexBorosilicate = {300, 1.49,
//                                                       650, 1.49};
  1000, 1.49};
  G4MaterialPropertyVector* refractiveIndexBorosilicateMPV = nmToMPV(refractiveIndexBorosilicate);

  // https://refractiveindex.info/?shelf=glass&book=SUMITA-BK&page=K-BK7
  // alpha = 0.0034706 cm-1 => 1/0.0034706 = 288 cm
  // LXeDetectorConstruction: 420.*cm
  std::vector<G4double> absorptionLengthBorosilicate = {300, 420.*cm,
//      650, 420.*cm};
                                                       1000, 420.*cm};
  G4MaterialPropertyVector* absorptionLengthBorosilicateMPV = nmToMPV(absorptionLengthBorosilicate);

  G4MaterialPropertiesTable* borosilicateMPT = new G4MaterialPropertiesTable();
  borosilicateMPT->AddProperty("RINDEX", refractiveIndexBorosilicateMPV ,true);
  borosilicateMPT->AddProperty("ABSLENGTH", absorptionLengthBorosilicateMPV, true);
  // borosilicateMPT->DumpTable();
  borosilicate->SetMaterialPropertiesTable(borosilicateMPT);

  printMaterialProperties(borosilicate);
  fMaterialsList.push_back(borosilicate);
  // saveMaterial(borosilicate);

  // █▀▀ █░█ █▀ █▀▀ █▀▄   █▀█ █░█ ▄▀█ █▀█ ▀█▀ ▀█   █▀▀ █░░ ▄▀█ █▀ █▀
  // █▀░ █▄█ ▄█ ██▄ █▄▀   ▀▀█ █▄█ █▀█ █▀▄ ░█░ █▄   █▄█ █▄▄ █▀█ ▄█ ▄█

  // Density found here
  // https://en.wikipedia.org/wiki/Fused_quartz#Typical_properties_of_clear_fused_silica
  G4Material* fusedSilica = new G4Material("fused-silica", 2.203*g/cm3, 2, kStateSolid);
  fusedSilica->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);
  fusedSilica->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 2);

  // Refractive index
  // https://en.wikipedia.org/wiki/Fused_quartz#Typical_properties_of_clear_fused_silica
  std::vector<G4double> refractiveIndexSilica = {300, 1.4585, 650, 1.4585};
  G4MaterialPropertyVector* refractiveIndexSilicaMPV = nmToMPV(refractiveIndexSilica);

  // Absorption length - copied from borosilicate
  std::vector<G4double> absorptionLengthSilica = {300, 420.*cm, 650, 420.*cm};
  G4MaterialPropertyVector* absorptionLengthSilicaMPV = nmToMPV(absorptionLengthSilica);

  G4MaterialPropertiesTable* silicaMPT = new G4MaterialPropertiesTable();
  silicaMPT->AddProperty("RINDEX", refractiveIndexSilicaMPV ,true);
  silicaMPT->AddProperty("ABSLENGTH", absorptionLengthSilicaMPV, true);
  // silicaMPT->DumpTable();
  fusedSilica->SetMaterialPropertiesTable(silicaMPT);

  printMaterialProperties(fusedSilica);
  fMaterialsList.push_back(fusedSilica);
  // saveMaterial(fusedSilica);

  // █▀ █ █░░ █ █▀▀ █▀█ █▄░█ █▀▀   █▀█ █▀▀ █▀ █ █▄░█
  // ▄█ █ █▄▄ █ █▄▄ █▄█ █░▀█ ██▄   █▀▄ ██▄ ▄█ █ █░▀█

  // For MPPC S13360-****CS window
  // https://en.wikipedia.org/wiki/Silicone_resin
  G4Material* siliconeResin = new G4Material("silicone-resin", 1.42*g/cm3, 2, kStateSolid);
  siliconeResin->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);
  siliconeResin->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 4);

  // Refractive index - found in Hamamatsu docs
  // https://www.hamamatsu.com/resources/pdf/ssd/s13360_series_kapd1052e.pdf
  // https://www.hamamatsu.com/us/en/product/optical-sensors/photodiodes/si-photodiodes/si-photodiode-faq/index.html
  std::vector<G4double> refractiveIndexResin = {300, 1.41, 650, 1.41};
  G4MaterialPropertyVector* refractiveIndexResinMPV = nmToMPV(refractiveIndexResin);

  // Absorption length - copied from borosilicate
  std::vector<G4double> absorptionLengthResin = {300, 420.*cm, 650, 420.*cm};
  G4MaterialPropertyVector* absorptionLengthResinMPV = nmToMPV(absorptionLengthResin);

  G4MaterialPropertiesTable* resinMPT = new G4MaterialPropertiesTable();
  resinMPT->AddProperty("RINDEX", refractiveIndexResinMPV, true);
  resinMPT->AddProperty("ABSLENGTH", absorptionLengthResinMPV, true);
  // resinMPT->DumpTable();
  siliconeResin->SetMaterialPropertiesTable(resinMPT);

  printMaterialProperties(siliconeResin);
  fMaterialsList.push_back(siliconeResin);
  // saveMaterial(siliconeResin);

  // █▄▄ █ ▄▀█ █░░ █▄▀ ▄▀█ █░░ █
  // █▄█ █ █▀█ █▄▄ █░█ █▀█ █▄▄ █

  // Technically PMT Bialkali photocathode has stainless steel substrate
  // https://sci-hub.do/https://doi.org/10.1016/S0168-9002(96)00809-1
  // https://en.wikipedia.org/wiki/Photocathode
  G4Material* bialkaliCathode = new G4Material("bialkali", 3*g/cm3, 3, kStateSolid);
  bialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Sb"), 1);
  bialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Rb"), 1);
  bialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Cs"), 1);

  G4MaterialPropertiesTable* bialkaliMPT = new G4MaterialPropertiesTable();
  // Use same refraction index as the borosilicate glass (window) like here: https://core.ac.uk/download/pdf/276263522.pdf
  std::vector<G4double> refractiveIndexBialkali = {300, 1.49,
                                                   650, 1.49};
  G4MaterialPropertyVector* refractiveIndexBialkaliMPV = nmToMPV(refractiveIndexBialkali);

  bialkaliMPT->AddProperty("RINDEX", refractiveIndexBialkaliMPV, true);
  bialkaliCathode->SetMaterialPropertiesTable(bialkaliMPT);

  printMaterialProperties(bialkaliCathode);
  fMaterialsList.push_back(bialkaliCathode);
  // saveMaterial(bialkaliCathode);

  // █▀▄▀█ █░█ █░░ ▀█▀ █ ▄▀█ █░░ █▄▀ ▄▀█ █░░ █
  // █░▀░█ █▄█ █▄▄ ░█░ █ █▀█ █▄▄ █░█ █▀█ █▄▄ █

  // multialkali, page 4 here SbNa2KCs
  // https://psec.uchicago.edu/library/photomultipliers/Photonis_PMT_basics.pdf
  G4Material* multialkaliCathode = new G4Material("multialkali", 3*g/cm3, 4, kStateSolid);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Sb"), 1);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Na"), 2);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("K"), 1);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Cs"), 1);

  G4MaterialPropertiesTable* multialkaliMPT = new G4MaterialPropertiesTable();
  // Use same refraction index as the borosilicate glass (window) like here: https://core.ac.uk/download/pdf/276263522.pdf
  // And R2257 with multialkali photocathode has borosilicate window: https://www.hamamatsu.com/resources/pdf/etd/R2257_TPMH1141E.pdf
  std::vector<G4double> refractiveIndexMultialkali = {300, 1.49, 650, 1.49};
  G4MaterialPropertyVector* refractiveIndexMultialkaliMPV = nmToMPV(refractiveIndexMultialkali);

  multialkaliMPT->AddProperty("RINDEX", refractiveIndexMultialkaliMPV ,true);
  multialkaliCathode->SetMaterialPropertiesTable(multialkaliMPT);

  printMaterialProperties(multialkaliCathode);
  fMaterialsList.push_back(multialkaliCathode);
  // saveMaterial(multialkaliCathode);

  // █▀ █ █░░ █ █▀▀ █▀█ █▄░█ ▄▄ █▀▀ █▀█ █▄█ █▀ ▀█▀ ▄▀█ █░░
  // ▄█ █ █▄▄ █ █▄▄ █▄█ █░▀█ ░░ █▄▄ █▀▄ ░█░ ▄█ ░█░ █▀█ █▄▄

  // Some info here: https://www.hamamatsu.com/resources/pdf/ssd/mppc_kapd9005e.pdf
  // Density taken from wikipedia: https://en.wikipedia.org/wiki/Silicon
  G4Material* siCathode = new G4Material("silicon-crystal", 2.32*g/cm3, 1, kStateSolid);
  siCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);
  {
    G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
    // Use same refraction index as the silicone resin (S13360-...) like here: https://core.ac.uk/download/pdf/276263522.pdf
    std::vector<G4double> ri = {300, 1.41, 650, 1.41};
    G4MaterialPropertyVector* riMPV = nmToMPV(ri);

    mpt->AddProperty("RINDEX", riMPV, true);
    siCathode->SetMaterialPropertiesTable(mpt);
  }

  printMaterialProperties(siCathode);
  fMaterialsList.push_back(siCathode);
  // saveMaterial(siCathode);

  // █▀█ █░█░█ █▀█ ▄▄ █▄▄ █▀█ █▀▀ █▀█ █▀█ █▀█ █▀▄ █ ▀█▀ █▀ █▄▀
  // █▀▀ ▀▄▀▄▀ █▄█ ░░ █▄█ █▄█ █▄█ █▄█ █▀▄ █▄█ █▄▀ █ ░█░ ▄█ █░█

  G4Material* PWO_B = getBaseMaterial("PWO-BOGO", BaseMaterialType::PWO); // new G4Material("PWO-BOGO", pwoDensity, PWO, kStateSolid);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // PbWO4 measured longitudinal transmittance (I/I_0) of a crystal of 21.3 cm long (R. Zhu, 1996)
    // Digitized from the undoped sample # 728
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    std::vector<G4double> transmittance = {360.2, 0, 374.3, 9.2, 387.3, 21.3, 402.4, 34.5, 427.6, 46.0, 454.0, 55.2, 483.4, 64.9, 519.0, 69.0, 579.2, 69.0, 636.3, 69.0, 702.7, 69.0, 755.7, 70.1, 797.6, 69.5};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 21.3*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    // TODO: add emission p. 321
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    PWO_B->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(PWO_B);
  fMaterialsList.push_back(PWO_B);
  // saveMaterial(PWO_B);

  // █▀█ █░█░█ █▀█ ▄▄ █▄█ ▄▀█ █▄░█ █▀▀
  // █▀▀ ▀▄▀▄▀ █▄█ ░░ ░█░ █▀█ █░▀█ █▄█

  // G4Material* PWO_Y = getBaseMaterial("PWO-SICCAS-YANG", BaseMaterialType::PWO);
  // {
  //   G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

  //   // Digitized from below article for the sample befor irradiation (2001) by P.Yang
  //   // https://sci-hub.do/10.1016/S0022-0248(01)02385-5
  //   std::vector<G4double> transmittance = {339.7, 0, 348.2, 1.4, 353.4, 9.9, 357.2, 18.9, 362.0, 31.1, 366.7, 40.7, 372.9, 47.1, 381.9, 52.9, 392.4, 57.0, 410.9, 62.0, 429.5, 64.8, 446.1, 66.3, 475.5, 67.9, 500.7, 69.3, 525.9, 70.1, 550.1, 70.9, 574.8, 71.2, 600.5, 71.6, 625.2, 71.9, 650.4, 72.1, 675.1, 72.3, 700.2, 72.4, 724.9, 72.4, 750.6, 72.6, 775.8, 72.3, 799.5, 73.1};
  //  G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
  //   G4double transmittanceDistance = 22*cm;

  //   // Absorption length PbWO4
  //   G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
  //   G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
  //   mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

  //   PWO_Y->SetMaterialPropertiesTable(mpt);
  // }
  // printMaterialProperties(PWO_Y);
  // fMaterialsList.push_back(PWO_Y);
  // // saveMaterial(PWO_Y);

  // █▀█ █░█░█ █▀█   █▀▀ █▀█ █▄█ ▀█▀ █░█ █▀█
  // █▀▀ ▀▄▀▄▀ █▄█   █▄▄ █▀▄ ░█░ ░█░ █▄█ █▀▄

  G4Material* PWO_C = getBaseMaterial("PWO-CRYTUR", BaseMaterialType::PWO);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // Emission spectrum for PbWO4 (CRYTUR) provided by Jindřich Houžvička via email
    // Normalized digitzed emission spectrum:
    std::vector<G4double> emissionSpectrum = {337.71, 0,
                                              346.77, 0.000079,
                                              354.21, 0.000396266346779,
                                              368.44, 0.002139838272608,
                                              384.29, 0.004675942891996,
                                              395.61, 0.006419514817825,
                                              403.37, 0.007132794242028,
                                              409.20, 0.007608313858163,
                                              417.28, 0.007846073666231,
                                              422.78, 0.007925326935587,
                                              428.93, 0.007846073666231,
                                              439.93, 0.00729130078074,
                                              450.28, 0.006736527895249,
                                              465.48, 0.005547728854911,
                                              483.92, 0.004121170006505,
                                              499.77, 0.003090877504879,
                                              521.12, 0.002139838272608,
                                              553.14, 0.001188799040338,
                                              606.19, 0.000475519616135,
                                              656.65, 0.000158506538712,
                                              703.23, 0.000047,
                                              732.99, 0};
    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);

    mpt->AddProperty("SCINTILLATIONCOMPONENT1", fastComponent, true);
    mpt->AddProperty("SCINTILLATIONCOMPONENT2", slowComponent, true);

    // Transmittance CRYTUR, provided by V.Berdnikov
    std::vector<G4double> transmittance = {330, 0, 340, 1.566694, 350, 13.223613, 360, 45.441407, 370, 62.071972, 380, 67.140230, 390, 68.931434, 400, 69.772116, 410, 70.262557, 420, 70.646469, 430, 71.216135, 440, 71.501950, 450, 71.723380, 460, 71.975302, 470, 72.019692, 480, 72.192253, 490, 72.614533, 500, 72.789630, 510, 72.788232, 520, 72.912663, 530, 73.042799, 540, 73.235979, 550, 73.354468, 560, 73.453758, 570, 73.639631, 580, 73.695232, 590, 73.819757, 600, 73.957622, 610, 73.997395, 620, 74.067210, 630, 74.073362, 640, 74.278860, 650, 74.253225, 660, 74.346432, 670, 74.327692, 680, 74.598802, 690, 74.607074, 700, 74.542008, 710, 74.542790, 720, 74.641923, 730, 74.787570, 740, 74.585494, 750, 74.804944, 760, 74.843619, 770, 74.728880, 780, 74.860927, 790, 74.742771, 800, 74.925695};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    PWO_C->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(PWO_C);
  generateEmissionMacro(PWO_C);
  fMaterialsList.push_back(PWO_C);
  // saveMaterial(PWO_C);

  // █▀█ █░█░█ █▀█   █▀ █ █▀▀ █▀▀ ▄▀█ █▀
  // █▀▀ ▀▄▀▄▀ █▄█   ▄█ █ █▄▄ █▄▄ █▀█ ▄█

  G4Material* PWO_S = getBaseMaterial("PWO-SICCAS", BaseMaterialType::PWO);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // Emission spectrum for PbWO4 (SICCAS) found in the literature
    // http://przyrbwn.icm.edu.pl/APP/PDF/131/a131z1p53.pdf
    // Digitzed emission spectrum:
    // std::vector<G4double> emissionSpectrum = {349.7, 0., 358.5, 8.7, 367.4, 18.2, 376.7, 28.4, 385.8, 37.8, 390.4, 42.3, 397.5, 47.7, 404.9, 52.3, 412.0, 56.3, 415.1, 58.2, 419.7, 59.3, 424.5, 59.9, 429.7, 59.9, 434.8, 59.1, 441.6, 55.9, 447.6, 52.4, 454.1, 48.6, 461.0, 44.8, 467.8, 40.3, 474.9, 35.4, 482.6, 30.1, 490.0, 24.9, 496.5, 20.5, 500.2, 17.9, 508.7, 13.6, 514.7, 11.1, 521.0, 8.8, 531.2, 5.9, 540.3, 3.4, 549.7, 1.5, 559.1, 0.};
    // Normalized digitzed emission spectrum:
    std::vector<G4double> emissionSpectrum = {349.7, 0, 358.5, 0.0013858556703, 367.4, 0.002899146344766, 376.7, 0.004523942647876, 385.8, 0.006021303946821, 390.4, 0.006738125845252, 397.5, 0.00759831212337, 404.9, 0.008331063397322, 412, 0.008968238418149, 415.1, 0.009270896553042, 419.7, 0.00944611968377, 424.5, 0.009541695936894, 429.7, 0.009541695936894, 434.8, 0.009414260932729, 441.6, 0.008904520916067, 447.6, 0.008346992772842, 454.1, 0.007741676503056, 461, 0.00713636023327, 467.8, 0.006419538334839, 474.9, 0.005638998934325, 482.6, 0.004794742031728, 490, 0.003966414504652, 496.5, 0.003265521981742, 500.2, 0.002851358218204, 508.7, 0.002166395070814, 514.7, 0.001768160682797, 521, 0.001401785045821, 531.2, 0.000939833155721, 540.3, 0.000541598767704, 549.7, 0.00023894063281, 559.1, 0};
    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);
    mpt->AddProperty("SCINTILLATIONCOMPONENT1", fastComponent, true);
    mpt->AddProperty("SCINTILLATIONCOMPONENT2", slowComponent, true);

    // Transmittance SICCAS (S047), provided by V.Berdnikov
    std::vector<G4double> transmittance = {340, 0., 350, 3.48074, 360, 29.3949, 370, 48.346, 380, 55.3979, 390, 58.6286, 400, 60.9593, 410, 62.6595, 420, 63.9743, 430, 64.9291, 440, 65.631, 450, 66.1062, 460, 66.7927, 470, 67.1896, 480, 67.3996, 490, 67.7139, 500, 68.053, 510, 68.3073, 520, 68.519, 530, 68.8111, 540, 68.9737, 550, 69.0832, 560, 69.4211, 570, 69.5605, 580, 69.6869, 590, 69.8266, 600, 69.9968, 610, 70.0129, 620, 70.1723, 630, 70.2061, 640, 70.3685, 650, 70.4813, 660, 70.4112, 670, 70.5207, 680, 70.6612, 690, 70.6313, 700, 70.6932, 710, 70.7846, 720, 70.7335, 730, 70.8962, 740, 70.934, 750, 70.9511, 760, 71.0478, 770, 71.0046, 780, 71.0511, 790, 71.0082, 800, 70.973};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    PWO_S->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(PWO_S);
  fMaterialsList.push_back(PWO_S);
  // saveMaterial(PWO_S);
  generateEmissionMacro(PWO_S);

  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ █░░ █ █▀▀ █░█ ▀█▀
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ █▄▄ █ █▄█ █▀█ ░█░

  G4Material* SciGlassLight = getBaseMaterial("SciGlassLight", BaseMaterialType::SciGlassLight);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-1-1 (transverse), provided by T.Horn
    std::vector<G4double> transmittance = {381, 0.0, 384, 0.88395, 387, 3.7391, 390, 8.9681, 393, 16.402, 396, 24.866, 399, 33.34, 402, 40.975, 405, 47.441, 408, 52.828, 411, 57.029, 414, 60.497, 417, 63.07, 420, 65.154, 423, 66.692, 426, 68.072, 429, 69.218, 432, 70.133, 435, 70.96, 438, 71.535, 441, 72.088, 444, 72.362, 447, 72.83, 450, 73.239, 453, 73.793, 456, 74.296, 459, 74.61, 462, 74.93, 465, 75.148, 468, 75.477, 471, 75.856, 474, 76.35, 477, 76.718, 480, 77.086, 483, 77.231, 486, 77.383, 489, 77.593, 492, 77.7, 495, 77.983, 498, 78.169, 501, 78.381, 504, 78.555, 507, 78.666, 510, 78.661, 513, 78.678, 516, 78.869, 519, 78.974, 522, 79.197, 525, 79.129, 528, 79.148, 531, 79.003, 534, 79.119, 537, 79.138, 540, 79.197, 543, 79.274, 546, 79.312, 549, 79.264, 552, 79.027, 555, 79.005, 558, 78.896, 561, 78.995, 564, 79.019, 567, 78.962, 570, 78.728, 573, 78.557, 576, 78.425, 579, 78.307, 582, 78.309, 585, 78.057, 588, 78.054, 591, 77.818, 594, 77.658, 597, 77.432, 600, 77.294, 603, 77.225, 606, 77.064, 609, 77.062, 612, 76.79, 615, 76.626, 618, 76.31, 621, 76.249, 624, 75.946, 627, 75.919, 630, 75.761, 633, 75.55, 636, 75.388, 639, 75.008, 642, 75.049, 645, 74.717, 648, 74.462, 651, 73.938, 654, 73.666, 657, 73.449, 660, 73.312, 663, 73.108, 666, 72.94, 669, 72.429, 672, 71.99, 675, 71.933, 678, 71.66, 681, 71.652, 684, 71.377, 687, 71.049, 690, 70.418, 693, 69.683, 696, 69.551, 699, 69.17, 702, 69.095, 705, 68.751, 708, 68.504, 711, 67.999, 714, 67.784, 717, 66.975, 720, 67.033, 723, 66.511, 726, 65.4, 729, 64.959, 732, 64.895, 735, 65.383, 738, 64.083, 741, 63.936, 744, 63.223, 747, 62.668, 750, 62.411, 753, 60.829, 756, 60.145, 759, 59.969, 762, 60.002, 765, 61.4, 768, 59.442, 771, 56.521, 774, 56.201, 777, 53.559, 780, 54.146, 783, 55.215, 786, 53.376, 789, 53.957, 792, 56.12, 795, 58.477};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 2*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlassLight->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlassLight);
  fMaterialsList.push_back(SciGlassLight);
  // saveMaterial(SciGlassLight);

  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ ▄█ ▄▄ ▄█ ▄▄ ▀█▀
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ ░█ ░░ ░█ ░░ ░█░

  G4Material* SciGlass11T = getBaseMaterial("SciGlass-1-1-T", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-1-1 (transverse), provided by T.Horn
    std::vector<G4double> transmittance = {381, 0.0, 384, 0.88395, 387, 3.7391, 390, 8.9681, 393, 16.402, 396, 24.866, 399, 33.34, 402, 40.975, 405, 47.441, 408, 52.828, 411, 57.029, 414, 60.497, 417, 63.07, 420, 65.154, 423, 66.692, 426, 68.072, 429, 69.218, 432, 70.133, 435, 70.96, 438, 71.535, 441, 72.088, 444, 72.362, 447, 72.83, 450, 73.239, 453, 73.793, 456, 74.296, 459, 74.61, 462, 74.93, 465, 75.148, 468, 75.477, 471, 75.856, 474, 76.35, 477, 76.718, 480, 77.086, 483, 77.231, 486, 77.383, 489, 77.593, 492, 77.7, 495, 77.983, 498, 78.169, 501, 78.381, 504, 78.555, 507, 78.666, 510, 78.661, 513, 78.678, 516, 78.869, 519, 78.974, 522, 79.197, 525, 79.129, 528, 79.148, 531, 79.003, 534, 79.119, 537, 79.138, 540, 79.197, 543, 79.274, 546, 79.312, 549, 79.264, 552, 79.027, 555, 79.005, 558, 78.896, 561, 78.995, 564, 79.019, 567, 78.962, 570, 78.728, 573, 78.557, 576, 78.425, 579, 78.307, 582, 78.309, 585, 78.057, 588, 78.054, 591, 77.818, 594, 77.658, 597, 77.432, 600, 77.294, 603, 77.225, 606, 77.064, 609, 77.062, 612, 76.79, 615, 76.626, 618, 76.31, 621, 76.249, 624, 75.946, 627, 75.919, 630, 75.761, 633, 75.55, 636, 75.388, 639, 75.008, 642, 75.049, 645, 74.717, 648, 74.462, 651, 73.938, 654, 73.666, 657, 73.449, 660, 73.312, 663, 73.108, 666, 72.94, 669, 72.429, 672, 71.99, 675, 71.933, 678, 71.66, 681, 71.652, 684, 71.377, 687, 71.049, 690, 70.418, 693, 69.683, 696, 69.551, 699, 69.17, 702, 69.095, 705, 68.751, 708, 68.504, 711, 67.999, 714, 67.784, 717, 66.975, 720, 67.033, 723, 66.511, 726, 65.4, 729, 64.959, 732, 64.895, 735, 65.383, 738, 64.083, 741, 63.936, 744, 63.223, 747, 62.668, 750, 62.411, 753, 60.829, 756, 60.145, 759, 59.969, 762, 60.002, 765, 61.4, 768, 59.442, 771, 56.521, 774, 56.201, 777, 53.559, 780, 54.146, 783, 55.215, 786, 53.376, 789, 53.957, 792, 56.12, 795, 58.477};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 2*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlass11T->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlass11T);
  fMaterialsList.push_back(SciGlass11T);
  // saveMaterial(SciGlass11T);


  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ ▀█ ▄▄ ▄█ ▄▄ ▀█▀
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ █▄ ░░ ░█ ░░ ░█░

  G4Material* SciGlass21T = getBaseMaterial("SciGlass-2-1-T", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-2-1 (transverse), provided by T.Horn
    std::vector<G4double> transmittance = {378, 0.0, 381, 0.26746, 384, 2.1027, 387, 6.0898, 390, 12.19, 393, 19.837, 396, 27.332, 399, 33.963, 402, 39.386, 405, 43.572, 408, 46.755, 411, 49.091, 414, 50.844, 417, 52.073, 420, 53.202, 423, 53.947, 426, 54.716, 429, 55.258, 432, 55.847, 435, 56.267, 438, 56.792, 441, 57.278, 444, 57.825, 447, 58.418, 450, 58.905, 453, 59.44, 456, 59.823, 459, 60.352, 462, 60.867, 465, 61.491, 468, 61.836, 471, 62.458, 474, 62.897, 477, 63.204, 480, 63.677, 483, 63.978, 486, 64.43, 489, 64.708, 492, 65.041, 495, 65.241, 498, 65.504, 501, 65.795, 504, 66.076, 507, 66.4, 510, 66.642, 513, 66.806, 516, 66.743, 519, 66.845, 522, 66.905, 525, 67.093, 528, 67.122, 531, 67.165, 534, 67.183, 537, 67.062, 540, 67.167, 543, 67.165, 546, 67.253, 549, 67.264, 552, 67.258, 555, 67.082, 558, 66.848, 561, 66.68, 564, 66.679, 567, 66.773, 570, 66.615, 573, 66.41, 576, 66.029, 579, 65.866, 582, 65.726, 585, 65.677, 588, 65.518, 591, 65.277, 594, 64.984, 597, 64.663, 600, 64.545, 603, 64.41, 606, 64.319, 609, 64.166, 612, 63.966, 615, 63.664, 618, 63.323, 621, 63.077, 624, 62.895, 627, 62.632, 630, 62.493, 633, 62.164, 636, 61.822, 639, 61.519, 642, 61.411, 645, 61.152, 648, 60.896, 651, 60.488, 654, 60.078, 657, 59.583, 660, 59.267, 663, 59.019, 666, 58.783, 669, 58.523, 672, 58.302, 675, 57.923, 678, 57.605, 681, 57.202, 684, 56.965, 687, 56.833, 690, 56.418, 693, 56.206, 696, 55.674, 699, 54.939, 702, 54.528, 705, 54.578, 708, 54.034, 711, 53.689, 714, 53.675, 717, 52.822, 720, 52.322, 723, 52.113, 726, 51.633, 729, 51.255, 732, 51.252, 735, 50.861, 738, 49.994, 741, 49.297, 744, 49.165, 747, 48.512, 750, 48.055, 753, 48.042, 756, 45.924, 759, 45.991, 762, 45.467, 765, 43.336, 768, 45.89, 771, 43.027, 774, 43.357, 777, 42.904, 780, 41.232, 783, 40.726, 786, 42.489, 789, 41.484, 792, 43.721, 795, 44.917};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 2*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlass21T->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlass21T);
  fMaterialsList.push_back(SciGlass21T);
  // saveMaterial(SciGlass21T);

  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ ▀█ ▄▄ ▄█ ▄▄ █░░
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ █▄ ░░ ░█ ░░ █▄▄

  G4Material* SciGlass21L = getBaseMaterial("SciGlass-2-1-L", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-2-1 (longitudinal), provided by T.Horn
    std::vector<G4double> transmittance = {417, 0, 420, 0.019291, 423, 0.051075, 426, 0.042103, 429, 0.12648, 432, 0.21571, 435, 0.24578, 438, 0.23868, 441, 0.23503, 444, 0.25494, 447, 0.40793, 450, 0.5183, 453, 0.60502, 456, 0.67893, 459, 0.78505, 462, 0.83117, 465, 0.90104, 468, 1.0902, 471, 1.1559, 474, 1.3481, 477, 1.4352, 480, 1.4727, 483, 1.683, 486, 1.8205, 489, 1.9382, 492, 2.035, 495, 2.1949, 498, 2.2811, 501, 2.4161, 504, 2.5173, 507, 2.5777, 510, 2.6604, 513, 2.7444, 516, 2.8094, 519, 2.8678, 522, 2.9097, 525, 2.9492, 528, 2.9932, 531, 3.0223, 534, 3.0592, 537, 3.0753, 540, 3.0353, 543, 3.0131, 546, 3.018, 549, 2.9284, 552, 2.8573, 555, 2.9063, 558, 2.9532, 561, 2.8478, 564, 2.7702, 567, 2.5904, 570, 2.5363, 573, 2.5765, 576, 2.4194, 579, 2.3411, 582, 2.1672, 585, 2.0485, 588, 2.0967, 591, 2.0769, 594, 1.8821, 597, 1.8649, 600, 1.8333, 603, 1.6409, 606, 1.6214, 609, 1.576, 612, 1.5059, 615, 1.296, 618, 1.175, 621, 1.1542, 624, 0.99208, 627, 0.71194, 630, 0.64321, 633, 0.6617, 636, 0.68889, 639, 0.71453, 642, 0.72238, 645, 0.67149, 648, 0.64248, 651, 0.50112, 654, 0.24482, 657, 0.16693, 660, 0.17344, 663, 0.16316, 666, 0.1589, 669, 0.091707, 672, 0.018016, 675, 0};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlass21L->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlass21L);
  fMaterialsList.push_back(SciGlass21L);
  // saveMaterial(SciGlass21L);

  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ ▀█ ▄▄ ▀█ ▄▄ ▀█▀
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ █▄ ░░ █▄ ░░ ░█░

  G4Material* SciGlass22T = getBaseMaterial("SciGlass-2-2-T", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-2-2 (transverse), provided by T.Horn
    std::vector<G4double> transmittance = {378, 0.0, 381, 0.01103, 384, 1.0857, 387, 3.6831, 390, 8.7839, 393, 15.653, 396, 23.589, 399, 31.801, 402, 39.377, 405, 45.978, 408, 51.624, 411, 56.384, 414, 60.175, 417, 63.24, 420, 65.698, 423, 67.773, 426, 69.263, 429, 70.711, 432, 71.78, 435, 72.741, 438, 73.537, 441, 74.013, 444, 74.554, 447, 74.903, 450, 75.383, 453, 75.732, 456, 76.188, 459, 76.62, 462, 76.881, 465, 77.071, 468, 77.36, 471, 77.854, 474, 78.082, 477, 78.427, 480, 78.443, 483, 78.596, 486, 78.669, 489, 78.846, 492, 78.836, 495, 79.185, 498, 79.346, 501, 79.447, 504, 79.677, 507, 79.657, 510, 79.677, 513, 79.61, 516, 79.777, 519, 79.944, 522, 80.103, 525, 80.238, 528, 80.152, 531, 80.205, 534, 80.064, 537, 80.197, 540, 80.138, 543, 80.295, 546, 80.378, 549, 80.398, 552, 80.349, 555, 80.124, 558, 80.192, 561, 80.025, 564, 80.197, 567, 80.128, 570, 80.169, 573, 79.908, 576, 79.799, 579, 79.748, 582, 79.559, 585, 79.478, 588, 79.319, 591, 79.389, 594, 79.173, 597, 79.083, 600, 78.793, 603, 78.956, 606, 78.92, 609, 78.651, 612, 78.766, 615, 78.721, 618, 78.809, 621, 78.568, 624, 78.432, 627, 78.464, 630, 78.545, 633, 78.506, 636, 78.493, 639, 78.444, 642, 78.098, 645, 77.775, 648, 77.534, 651, 77.519, 654, 77.198, 657, 77.335, 660, 77.344, 663, 77.244, 666, 76.701, 669, 76.603, 672, 76.692, 675, 76.497, 678, 76.408, 681, 76.151, 684, 76.015, 687, 75.802, 690, 75.607, 693, 75.435, 696, 75.215, 699, 75.087, 702, 74.939, 705, 74.527, 708, 74.451, 711, 74.128, 714, 73.602, 717, 73.648, 720, 73.349, 723, 72.866, 726, 72.368, 729, 72.465, 732, 71.806, 735, 71.998, 738, 71.474, 741, 70.167, 744, 70.597, 747, 70.115, 750, 69.862, 753, 69.461, 756, 68.131, 759, 67.538, 762, 67.344, 765, 68.45, 768, 69.379, 771, 66.99, 774, 63.946, 777, 64.371, 780, 63.714, 783, 61.401, 786, 60.852, 789, 61.755, 792, 64.239, 795, 66.485};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 2*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlass22T->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlass22T);
  fMaterialsList.push_back(SciGlass22T);
  // saveMaterial(SciGlass22T);

  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ █░█ ▄▄ ▄█ ▄▄ ▀█▀
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ ▀▀█ ░░ ░█ ░░ ░█░

  G4Material* SciGlass41T = getBaseMaterial("SciGlass-4-1-T", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-4-1 (transverse), provided by T.Horn
    std::vector<G4double> transmittance = {200, 0, 210, 0.349249, 220, 0.246796, 230, 0.191658, 240, 0.196597, 250, 0.308107, 260, 0.434015, 270, 0.54645, 280, 0.65847, 290, 0.773982, 300, 0.91034, 310, 0.979255, 320, 1.011377, 330, 1.128671, 340, 1.296961, 350, 1.568226, 360, 1.842787, 370, 1.966991, 380, 2.026229, 390, 7.620968, 400, 29.663076, 410, 51.267138, 420, 63.831608, 430, 70.420937, 440, 73.701574, 450, 75.71842, 460, 77.343924, 470, 78.7765, 480, 79.903564, 490, 80.694451, 500, 81.337697, 510, 81.71125, 520, 81.902702, 530, 81.982414, 540, 82.212062, 550, 82.078802, 560, 81.880259, 570, 81.692785, 580, 81.006776, 590, 80.284028, 600, 79.993184, 610, 79.504759, 620, 79.116835, 630, 78.468761, 640, 77.878152, 650, 77.549832, 660, 76.999302, 670, 76.682358, 680, 76.275268, 690, 75.748847, 700, 75.268014, 710, 74.851073, 720, 74.405903, 730, 73.884759, 740, 73.068089, 750, 72.43739, 760, 72.051719, 770, 71.443808, 780, 70.743174, 790, 70.149105, 800, 69.384455};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 2*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlass41T->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlass41T);
  fMaterialsList.push_back(SciGlass41T);
  // saveMaterial(SciGlass41T);

  // █▀ █▀▀ █ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ █░█ ▄▄ ▄█ ▄▄ █░░
  // ▄█ █▄▄ █ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ ▀▀█ ░░ ░█ ░░ █▄▄

  G4Material* SciGlass41L = getBaseMaterial("SciGlass-4-1-L", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance SciGlass-4-1 (longtitudinal), provided by T.Horn
    std::vector<G4double> transmittance = {200, 0, 210, 0.069765, 220, 0.027811, 230, 0.026263, 240, 0.036594, 250, 0.072978, 260, 0.10794, 270, 0.143685, 280, 0.176654, 290, 0.216414, 300, 0.252862, 310, 0.259973, 320, 0.264657, 330, 0.277921, 340, 0.338508, 350, 0.4099, 360, 0.499389, 370, 0.584733, 380, 0.639023, 390, 0.582725, 400, 0.510784, 410, 3.063759, 420, 11.140062, 430, 19.133428, 440, 24.645589, 450, 28.378947, 460, 32.328752, 470, 36.409245, 480, 40.067563, 490, 42.772399, 500, 44.835243, 510, 46.154412, 520, 46.812182, 530, 46.834435, 540, 46.634598, 550, 45.803039, 560, 44.500032, 570, 42.071389, 580, 38.863329, 590, 35.786495, 600, 33.530721, 610, 31.090229, 620, 28.659624, 630, 26.21967, 640, 24.106397, 650, 22.340703, 660, 20.634379, 670, 19.133298, 680, 17.885559, 690, 16.465658, 700, 15.091078, 710, 13.830955, 720, 12.645989, 730, 11.491253, 740, 10.274713, 750, 9.231806, 760, 8.400117, 770, 7.549239, 780, 6.801887, 790, 6.067987, 800, 5.404571};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    SciGlass41L->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(SciGlass41L);
  fMaterialsList.push_back(SciGlass41L);
  // saveMaterial(SciGlass41L);
  generateEmissionMacro(SciGlass41L);

  // █▀▀ █▀ █▀▀ █░░ ▄▀█ █▀ █▀ ▄▄ █▀█ ▄▄ ▀█▀
  // █▄▄ ▄█ █▄█ █▄▄ █▀█ ▄█ ▄█ ░░ █▄█ ░░ ░█░

  G4Material* CSGlass0T = getBaseMaterial("CSGlass-0-T", BaseMaterialType::CSGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::CSGlass);

    // Transmittance CSGlass-0 (transverse), provided by T.Horn
    std::vector<G4double> transmittance = {390, 0.0, 400, 0.03, 410, 0.01, 420, 0.04, 430, 0.88, 440, 5.03, 450, 13.97, 460, 21.53, 470, 24.05, 480, 34.59, 490, 42.74, 500, 50.02, 510, 55.52, 520, 58.24, 530, 59.82, 540, 62.27, 550, 63.83, 560, 64.77, 570, 66.89, 580, 68.73, 590, 70.09, 600, 71.31, 610, 72.43, 620, 73.65, 630, 74.71, 640, 75.63, 650, 76.71, 660, 77.61, 670, 78.37, 680, 79.22, 690, 80.08, 700, 80.78, 710, 81.50, 720, 81.99, 730, 82.66, 740, 82.93, 750, 83.46, 760, 83.89, 770, 84.20, 780, 84.50, 790, 84.95, 800, 84.86};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 2*cm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    CSGlass0T->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(CSGlass0T);
  fMaterialsList.push_back(CSGlass0T);
  // saveMaterial(CSGlass0T);

  // █▄▄ ▄▀█ █▀ █ ▀█ █▀█ █▀
  // █▄█ █▀█ ▄█ █ █▄ █▄█ ▄█
  // Barium disilicate

  G4Material* BaSi2O5 = new G4Material("BaSi2O5", 3.8*g/cm3, 3, kStateSolid);
  BaSi2O5->AddElement(elements->getElement("Ba"), 1);
  BaSi2O5->AddElement(elements->getElement("Si"), 2);
  BaSi2O5->AddElement(elements->getElement("O"), 5);

  G4MaterialPropertiesTable* BaSi2O5MPT = new G4MaterialPropertiesTable();

  // BaSi2O5 emission spectrum: https://sci-hub.do/https://pubs.rsc.org/en/Content/ArticleLanding/NJ/2016/C6NJ01831A
  std::vector<G4double> digitizedBaSiOEmissionSpectra = {388.24531516183987, 0.07421150278292998, 406.64395229982966, 0.371057513914657, 425.5536626916525, 1.113172541743971, 441.90800681431, 2.263450834879407, 455.7069846678024, 3.6734693877551017, 466.95059625212946, 5.083487940630796, 476.6609880749574, 6.345083487940631, 487.39352640545144, 7.38404452690167, 498.12606473594553, 8.274582560296846, 511.41396933560475, 8.534322820037104, 524.7018739352641, 8.256029684601113, 537.9897785349233, 7.4397031539888685, 552.2998296422487, 6.122448979591837, 566.0988074957411, 4.7680890538033385, 580.9199318568996, 3.6178107606679024, 598.8074957410563, 2.3191094619666046, 622.3168654173764, 1.2987012987012978, 647.359454855196, 0.649350649350648, 669.84667802385, 0.371057513914657, 697.9557069846678, 0.12987012987012925};
  G4MaterialPropertyVector* basioFastComponent = nmToMPV(digitizedBaSiOEmissionSpectra);

  BaSi2O5MPT->AddProperty("SCINTILLATIONCOMPONENT1", basioFastComponent, true);
  BaSi2O5MPT->AddProperty("SCINTILLATIONCOMPONENT2", basioFastComponent, true);

  // BaSi2O5MPT->DumpTable();
  BaSi2O5->SetMaterialPropertiesTable(BaSi2O5MPT);

  printMaterialProperties(BaSi2O5);
  fMaterialsList.push_back(BaSi2O5);
  // saveMaterial(BaSi2O5);

  // █▀▀ █░█ █▄▄ █▀▀   █▄▄
  // █▄▄ █▄█ █▄█ ██▄   █▄█
  // SciGlass without scintillation
  // 45.5 x 44.7 x 46.15 mm
  // 3.9988 g/cc
  G4Material* Cube61 = getBaseMaterial("Cube-6-1", BaseMaterialType::SciGlass, 3.9988*g/cm3);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance Cube 6-1 (Side 1), provided by T.Horn
    std::vector<G4double> transmittance = {360, 0, 370, 2.16279, 380, 10.896482, 390, 24.843423, 400, 42.832111, 410, 57.082554, 420, 64.611682, 430, 68.208564, 440, 70.084142, 450, 71.246156, 460, 73.192849, 470, 75.18825, 480, 76.809544, 490, 78.253883, 500, 79.473175, 510, 80.445834, 520, 81.144513, 530, 81.633263, 540, 82.24997, 550, 82.649501, 560, 82.882158, 570, 82.673031, 580, 82.17494, 590, 81.807493, 600, 81.831848, 610, 81.773229, 620, 81.66521, 630, 81.588036, 640, 81.6374, 650, 81.929863, 660, 82.014392, 670, 82.526795, 680, 83.247076, 690, 83.539822, 700, 83.975742, 710, 84.535437, 720, 85.005156, 730, 85.24228, 740, 85.078347, 750, 85.310917, 760, 85.798294, 770, 86.035154, 780, 86.117811, 790, 86.346551, 800, 86.032297};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 45.5*mm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    Cube61->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(Cube61);
  fMaterialsList.push_back(Cube61);
  // saveMaterial(Cube61);
  generateEmissionMacro(Cube61);

  // █▀▀ █░█ █▄▄ █▀▀   █▀█
  // █▄▄ █▄█ █▄█ ██▄   ▀▀█
  // SciGlass with scintillation
  // 46.4 x 46.5 x 48.6 mm
  // 4.0375 g/cc
  G4Material* Cube91 = getBaseMaterial("Cube-9-1", BaseMaterialType::SciGlass, 4.0375*g/cm3);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance Cube 9-1 (Side 1), provided by T.Horn
    std::vector<G4double> transmittance = {230, 0, 240, 0.03316, 250, 0.082422, 260, 0.130802, 270, 0.160895, 280, 0.18773, 290, 0.205044, 300, 0.216222, 310, 0.211861, 320, 0.210539, 330, 0.219392, 340, 0.272745, 350, 0.346259, 360, 0.423862, 370, 0.501118, 380, 0.568786, 390, 3.179175, 400, 22.657059, 410, 43.933347, 420, 54.610449, 430, 59.161575, 440, 61.407544, 450, 62.968147, 460, 64.432349, 470, 65.751359, 480, 66.994972, 490, 67.921845, 500, 68.742199, 510, 69.231281, 520, 69.366782, 530, 69.244247, 540, 69.069145, 550, 68.563096, 560, 67.892043, 570, 66.777364, 580, 65.452986, 590, 64.164411, 600, 63.090143, 610, 61.903752, 620, 60.571362, 630, 59.335159, 640, 58.127898, 650, 57.187949, 660, 56.003655, 670, 54.945339, 680, 54.031044, 690, 52.787157, 700, 51.595379, 710, 50.569626, 720, 49.547133, 730, 48.342423, 740, 47.074086, 750, 45.898912, 760, 44.93075, 770, 43.817648, 780, 42.673453, 790, 41.594499, 800, 40.461687};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 46.4*mm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    Cube91->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(Cube91);
  fMaterialsList.push_back(Cube91);
  // saveMaterial(Cube91);
  generateEmissionMacro(Cube91);

  // █▀▀ █░█ █▄▄ █▀▀   █░█
  // █▄▄ █▄█ █▄█ ██▄   ▀▀█
  // CSGlass without scintillation
  // 48 x 45.3 x 49 mm
  // 4.0321 g/cc
  G4Material* Cube41 = getBaseMaterial("Cube-4-1", BaseMaterialType::CSGlass, 4.0321*g/cm3);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::CSGlass);

    // Transmittance Cube 9-1 (Side 1), provided by T.Horn
    std::vector<G4double> transmittance = {360, 0, 370, 0.108843, 380, 1.682287, 390, 7.626844, 400, 1.269189, 410, 9.969795, 420, 26.600303, 430, 50.716495, 440, 50.196701, 450, 56.173457, 460, 41.76715, 470, 23.889791, 480, 41.122552, 490, 52.41726, 500, 65.268738, 510, 75.107481, 520, 77.004327, 530, 75.852153, 540, 78.1795, 550, 78.078823, 560, 76.339234, 570, 78.535669, 580, 79.93886, 590, 79.875916, 600, 80.118864, 610, 80.421527, 620, 80.423071, 630, 80.423305, 640, 80.554503, 650, 80.938098, 660, 81.139541, 670, 81.699749, 680, 82.361223, 690, 82.660915, 700, 83.064758, 710, 83.631855, 720, 84.085849, 730, 84.414308, 740, 84.244261, 750, 84.619463, 760, 85.128313, 770, 85.453942, 780, 85.395023, 790, 85.546995, 800, 85.542119};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 48*mm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    Cube41->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(Cube41);
  fMaterialsList.push_back(Cube41);
  // saveMaterial(Cube41);
  generateEmissionMacro(Cube41);


  // █▀▀ █░█ █▄▄ █▀▀ ▄█ █▀█
  // █▄▄ █▄█ █▄█ ██▄ ░█ █▄█
  // CSGlass with scintillation
  // 40.87 x 49.8 x 46.28 mm
  // 4.4608 g/cc
  G4Material* Cube101 = getBaseMaterial("Cube-10-1", BaseMaterialType::CSGlass, 4.4608*g/cm3);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::CSGlass);

    // Transmittance Cube 9-1 (Side 1), provided by T.Horn
    std::vector<G4double> transmittance = {350, 0, 360, 0.005025, 370, 0.969913, 380, 7.482468, 390, 18.925163, 400, 3.180728, 410, 14.894546, 420, 28.966188, 430, 41.995567, 440, 38.879515, 450, 41.002106, 460, 33.194447, 470, 23.948771, 480, 35.659269, 490, 45.279129, 500, 56.109482, 510, 64.199192, 520, 66.551225, 530, 66.520211, 540, 68.602506, 550, 68.835592, 560, 67.913282, 570, 69.441346, 580, 70.395579, 590, 70.561702, 600, 70.639553, 610, 70.431972, 620, 70.016352, 630, 69.742635, 640, 69.85136, 650, 70.64337, 660, 71.479986, 670, 72.94665, 680, 74.891631, 690, 76.318693, 700, 77.424448, 710, 78.623498, 720, 79.573384, 730, 80.102538, 740, 80.146442, 750, 80.639509, 760, 81.044733, 770, 81.12274, 780, 80.857597, 790, 80.60648, 800, 80.331084};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 40.87*mm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    Cube101->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(Cube101);
  fMaterialsList.push_back(Cube101);
  // saveMaterial(Cube101);
  generateEmissionMacro(Cube101);


  // █▀ ▄▀█ █▀▄▀█ █▀█ █░░ █▀▀   ▄▀█
  // ▄█ █▀█ █░▀░█ █▀▀ █▄▄ ██▄   █▀█
  // Sample A - "Green" - in France
  // 26 x 22 x 200 mm
  // 4.4608 g/cc ?
  G4Material* sampleA = getBaseMaterial("SciGlass-A", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance Sample A from "SciGlass-samples-tests.pdf"
    std::vector<G4double> transmittance = {229.9, 0.0, 250.0, 0.1, 269.7, 0.2, 290.4, 0.3, 310.5, 0.3, 330.6, 0.4, 350.3, 0.4, 370.3, 0.6, 390.4, 0.6, 409.7, 3.0, 420.3, 11.2, 429.4, 19.1, 440.4, 24.6, 450.2, 28.4, 460.8, 32.3, 469.9, 36.4, 480.8, 39.9, 490.7, 42.7, 500.2, 44.8, 510.7, 46.2, 519.9, 46.7, 530.8, 46.8, 539.9, 46.5, 549.8, 45.7, 560.4, 44.4, 570.2, 42.0, 580.8, 38.7, 590.6, 35.8, 600.5, 33.5, 623.0, 27.9, 654.0, 21.5, 680.4, 17.7, 711.0, 13.7, 746.9, 9.7, 800.0, 5.4, 850.3, 0.0};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 200*mm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    sampleA->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(sampleA);
  fMaterialsList.push_back(sampleA);
  // saveMaterial(sampleA);
  generateEmissionMacro(sampleA);


  // █▀▀ █░█ ▄▀█ ▄▄ ▀█ █▀█ ▀█ ▀█ ▄▄ ▀█ ▄▄ ▄█
  // █▄▄ █▄█ █▀█ ░░ █▄ █▄█ █▄ █▄ ░░ █▄ ░░ ░█
  // CUA-2022-2_1 for Berd's nPE vs source distance measurements
  // 20 x 20 x 200 mm ?
  // 4.4608 g/cc ?
  G4Material* cua202221 = getBaseMaterial("CUA-2022-2_1", BaseMaterialType::SciGlass);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::SciGlass);

    // Transmittance CUA-2022-2-1 from: https://wiki.jlab.org/cuawiki/images/e/e7/Sci-Glass_Transmission_Graphs.pdf
    std::vector<G4double> transmittance = {315.5, 0.0, 349.8, 1.4, 372.0, 1.9, 386.0, 2.0, 393.6, 7.5, 401.2, 19.7, 409.1, 30.2, 417.3, 35.3, 426.4, 37.2, 438.8, 37.6, 454.0, 39.4, 472.8, 42.8, 490.2, 45.7, 505.7, 47.0, 523.9, 45.7, 542.7, 42.2, 558.8, 37.5, 570.4, 33.7, 585.8, 27.2, 606.2, 21.3, 624.1, 16.4, 646.9, 12.0, 673.0, 8.1, 703.1, 5.0, 732.0, 3.1, 773.0, 1.6, 798.5, 0.0};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 200*mm;

    // Absorption length
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    cua202221->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(cua202221);
  fMaterialsList.push_back(cua202221);
  // saveMaterial(cua202221);
  generateEmissionMacro(cua202221);


  // █▀▄ █░█ █▀▄▀█ █▀▄▀█ █▄█
  // █▄▀ █▄█ █░▀░█ █░▀░█ ░█░
  G4Material* dummy = getBaseMaterial("dummy", BaseMaterialType::CSGlass, 4.4608*g/cm3);
  {
    // G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::CSGlass);

    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // Emission spectrum for PbWO4 (CRYTUR) provided by Jindřich Houžvička via email
    // Normalized digitzed emission spectrum:
//    std::vector<G4double> emissionSpectrum = {400, 0,
//                                              401, 1,
//                                              479, 1,
//                                              480, 0
//                                              };
//    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
//    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);
//
//    mpt->AddProperty("SCINTILLATIONCOMPONENT1", fastComponent, true);
//    mpt->AddProperty("SCINTILLATIONCOMPONENT2", slowComponent, true);

    // Transmittance CRYTUR, provided by V.Berdnikov
    std::vector<G4double> transmittance = {330, 0, 340, 1.566694, 350, 13.223613, 360, 45.441407, 370, 62.071972, 380, 67.140230, 390, 68.931434, 400, 69.772116, 410, 70.262557, 420, 70.646469, 430, 71.216135, 440, 71.501950, 450, 71.723380, 460, 71.975302, 470, 72.019692, 480, 72.192253, 490, 72.614533, 500, 72.789630, 510, 72.788232, 520, 72.912663, 530, 73.042799, 540, 73.235979, 550, 73.354468, 560, 73.453758, 570, 73.639631, 580, 73.695232, 590, 73.819757, 600, 73.957622, 610, 73.997395, 620, 74.067210, 630, 74.073362, 640, 74.278860, 650, 74.253225, 660, 74.346432, 670, 74.327692, 680, 74.598802, 690, 74.607074, 700, 74.542008, 710, 74.542790, 720, 74.641923, 730, 74.787570, 740, 74.585494, 750, 74.804944, 760, 74.843619, 770, 74.728880, 780, 74.860927, 790, 74.742771, 800, 74.925695};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX");
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    dummy->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(dummy);
  fMaterialsList.push_back(dummy);
  // saveMaterial(dummy);
  // generateEmissionMacro(dummy);
}

Materials::~Materials() {
  // TODO Auto-generated destructor stub
}

G4Material* Materials::getMaterial(const char* materialId){
  for (int i=0; i<(int)fMaterialsList.size(); i++){
    if (fMaterialsList[i]->GetName() == materialId){
      return fMaterialsList[i];
    }
  }
  G4cout << "ERROR: Materials::getMaterial material " << materialId << " not found." << G4endl;
  return NULL;
}

G4MaterialPropertyVector* Materials::calcAbsorptionLength(G4MaterialPropertiesTable* mpt, G4MaterialPropertyVector* refractiveIndex, G4MaterialPropertyVector* measuredTransmittance, G4double sampleLength, G4int nPoints){
  // Reflectivity. To be filled from down below
  G4MaterialPropertyVector* reflectivityMPV = new G4MaterialPropertyVector();

  // Ideal Transmittance. To be filled from down below
  G4MaterialPropertyVector* idealTransmittanceMPV = new G4MaterialPropertyVector();

  // Theoretical Transmittance. To be filled from down below
  // std::vector<G4double> realTransmittance = {};

  // Attenuation length
  G4MaterialPropertyVector* attenuationLengthMPV = new G4MaterialPropertyVector();

  // Define energy limits for the output absorption length MPV as the widest between provided RI and T MPVs'
  // G4double eMin = std::min(refractiveIndex->GetMinLowEdgeEnergy(), measuredTransmittance->GetMinLowEdgeEnergy());
  // G4double eMax = std::max(refractiveIndex->GetMaxLowEdgeEnergy(), measuredTransmittance->GetMaxLowEdgeEnergy());



  G4double eMin = std::max(refractiveIndex->GetMinEnergy(), measuredTransmittance->GetMinEnergy());
  G4double eMax = std::min(refractiveIndex->GetMaxEnergy(), measuredTransmittance->GetMaxEnergy());

  for (G4int i=0; i<nPoints; i++){
    // Workaround the rounding of the last point... ABSLENGTH = -nan
    G4double e;
    G4double eStep = (eMax-eMin)/(nPoints-1);
    if (i == 0) e = eMin;
    if (i > 0 && i < nPoints - 1) e = eMin + i*eStep;
    if (i == nPoints - 1) e = eMax;

    // All formulas below taken from:
    // https://sci-hub.do/https://doi.org/10.1016/0168-9002(93)91185-P
    G4double RI = refractiveIndex->Value(e);

    // Reflectivity - formula (3)
    G4double refractiveIndexAir = 1;
    G4double R = std::pow((RI - refractiveIndexAir)/(RI + refractiveIndexAir), 2.);
    reflectivityMPV->InsertValues(e, R);

    // Ideal transmittance with infinite light attenuation length and two parallel end surfaces
    G4double Ts = (1 - R)/(1 + R);
    idealTransmittanceMPV->InsertValues(e, Ts);

    // Real transmittance can also be estimated but we're using the measured value
    // G4double tReal = crystalLength*pow(1-r,2)/(1-pow(l*r,2));

    // Absorption (light attenuation length)
    G4double T = measuredTransmittance->Value(e)/100.;

    G4double lambda;

    // It can happen that measured transmittance is higher than tha ideal transmittance...
    // Make sure to provide the RINDEX in the whole region.

    if (T>0){
      G4double a = T*(1-Ts)*(1-Ts);
      G4double b = std::sqrt(4*Ts*Ts*Ts*Ts + T*T*(1-Ts*Ts)*(1-Ts*Ts))-2*Ts*Ts; // @suppress("Ambiguous problem")
      G4double c = a/b;
      G4double d = std::log(c); // @suppress("Ambiguous problem")
      lambda = sampleLength/d;
    }
    else {
      lambda = 0;
    }
    attenuationLengthMPV->InsertValues(e, lambda);
  }

  // Add custom values to the material properties table (for debugging output)
  mpt->AddProperty("MY_TRANSMITTANCE", measuredTransmittance, true);
  mpt->AddProperty("MY_REFLECTIVITY", reflectivityMPV, true);
  mpt->AddProperty("MY_IDEAL_TRANSM", idealTransmittanceMPV, true);

  // Return MPV
  // attenuationLengthMPV->SetSpline(true); // Removed in Geant 11
  return attenuationLengthMPV;
}

//void Materials::printLine(const char* heading, std::vector<G4double> values, G4double unit){
//  // Print photon wavelength
//  std::cout << std::endl << std::left << std::setw(TAB_COLUMN_1) << heading;
//  for (G4int i = 0; i < (G4int)values.size(); i++){
//    G4double value = (unit == 0.) ? values[i] : values[i]/unit;
//    std::cout << std::left << std::setw(TAB_COLUMN) << value;
//  }
//}
//
//
//void Materials::printHeader(){
//  printLine("Photon wavelength, nm", fOpticalPhotonWavelength);
//  printLine("Photon energy, eV", fOpticalPhotonEnergy, eV);
//}

typedef std::map< G4int, G4MaterialPropertyVector*,
                  std::less<G4int> >::const_iterator MPiterator;

void Materials::printMaterialProperties(G4Material* material){
  std::cout << "\nMaterial name: " << material->GetName() << std::endl;
  G4MaterialPropertiesTable* mpt = material->GetMaterialPropertiesTable();
  if (!mpt) return;


  std::vector<G4double> fOpticalPhotonWavelength = {360, 400., 440., 480., 520., 560., 600., 640., 680., 720., 760};

  // Print photon wavelengths
  std::cout << std::left << std::setw(TAB_COLUMN_1) << "PHOTON_WAVELEGTH, nm";
  for (G4int i = 0; i < (G4int)fOpticalPhotonWavelength.size(); i++){
    std::cout << std::left << std::setw(TAB_COLUMN) << fOpticalPhotonWavelength[i];
  }

  std::cout << std::endl;

  // Print photon energy
  std::cout << std::left << std::setw(TAB_COLUMN_1) << "PHOTON_ENERGY, eV";
  for (G4int i = 0; i < (G4int)fOpticalPhotonWavelength.size(); i++){
    std::cout << std::left << std::setw(TAB_COLUMN) << wavelengthNmToEnergy(fOpticalPhotonWavelength[i])/eV;
  }
  std::cout << std::endl;

  // Print material properties
  std::vector<G4String> propertyNames = mpt->GetMaterialPropertyNames();

  // Replaced in Geant4 v.11 with const std::vector<G4MaterialPropertyVector*>& GetProperties() const
  //const std::map<G4int, G4MaterialPropertyVector*, std::less<G4int> >* pMapNew = mpt->GetPropertyMap();
  std::vector<G4String> materialPropertiesNames = mpt->GetMaterialPropertyNames();

  for(G4String propertyName : materialPropertiesNames){
    G4MaterialPropertyVector* property = mpt->GetProperty(propertyName);
    if (!property) continue;

    // Print property name
    std::cout << std::left << std::setw(TAB_COLUMN_1) << propertyName;
    // Print property values
    for (G4int i = 0; i < (G4int)fOpticalPhotonWavelength.size(); i++){
      G4bool b;
      G4double value = property->GetValue(wavelengthNmToEnergy(fOpticalPhotonWavelength[i]), b);
      std::cout << std::left << std::setw(TAB_COLUMN) << value;
    }

    std::cout << std::endl;
  }

  // Print material constant properties
  std::vector<G4String> constPropertyNames = mpt->GetMaterialConstPropertyNames();
  for(G4String constPropertyName : constPropertyNames){
    if (!mpt->ConstPropertyExists(constPropertyName)) continue;
    // Print property name and value
    G4double constPropertyValue = mpt->GetConstProperty(constPropertyName);
    std::cout << std::left << std::setw(TAB_COLUMN_1) << constPropertyName << constPropertyValue << std::endl;
  }
}

void Materials::printMaterialProperties(const char* materialId){
  G4Material* material = getMaterial(materialId);
  if (material == NULL) return;
  printMaterialProperties(material);
}

Materials* Materials::getInstance() {
  static Materials materials;
  if (fgInstance == nullptr)
  {
    fgInstance = &materials;
  }
  return fgInstance;
}

G4MaterialPropertyVector* Materials::evToMPV(std::vector<G4double> digitizedArray){
  assert(digitizedArray.size()%2 == 0);
  G4MaterialPropertyVector* mpv = new G4MaterialPropertyVector(); // true for spline
  for (G4int i = 0; i < (G4int)digitizedArray.size(); i+=2){
   G4double energy = digitizedArray[i]*eV; // E (eV) = 1239.8 / l (nm)
   G4double value = digitizedArray[i+1];
   mpv->InsertValues(energy, value);
  }
  return mpv;
}

G4MaterialPropertyVector* Materials::nmToMPV(std::vector<G4double> digitizedArrayNm){
  assert(digitizedArrayNm.size()%2 == 0);
  G4MaterialPropertyVector* mpv = new G4MaterialPropertyVector(); // true for spline
  // for (G4int i = 0; i < (G4int)digitizedArrayNm.size(); i+=2){
  for (G4int i = (G4int)digitizedArrayNm.size()-2; i >=0 ; i-=2){
   G4double hc = 1239.84193;
   G4double energy = hc/digitizedArrayNm[i]*eV; // E (eV) = 1239.8 / l (nm)
   G4double value = digitizedArrayNm[i+1];
   mpv->InsertValues(energy, value);
  }
  return mpv;
}

// PS: when having a static std::vector member
//std::vector<G4Material*> Materials::fMaterialsList = {};

G4double Materials::energyToWavelangthNm(G4double energy) {
  G4double hc = 1239.84193;
  return hc*eV/energy;
}

G4double Materials::wavelengthNmToEnergy(G4double wavelength){
  G4double hc = 1239.84193;
  return hc/wavelength*eV; // E (eV) = 1239.8 / l (nm)
}

//TGraph* Materials::drawMPV(G4MaterialPropertyVector *mpv) {
//  // G4double eMin = mpv->GetMinLowEdgeEnergy();
//  // G4double eMax = mpv->GetMaxLowEdgeEnergy();
//  TGraph* graph = new TGraph();
//  // G4int i = 0;
//  // for (G4int i = (G4int)mpv->GetVectorLength()-1; i >=0 ; i--){
//  G4int vectorLength = (G4int)mpv->GetVectorLength();
//  for (G4int i=0; i<vectorLength; i++){
//    G4double e = mpv->GetLowEdgeEnergy(i);
//    G4double wavelength = energyToWavelangthNm(e);
//
//    G4bool b;
//    G4double value = mpv->GetValue(e, b);
//
//    graph->AddPoint(wavelength, value);
//  }
//  return graph;
//}

G4Material* Materials::getBaseMaterial(const char* newName, BaseMaterialType bmt, G4double overrideDensity) {
  // Instantiate elements database
  Elements* elements = Elements::getInstance();

  // Create
  if (bmt == BaseMaterialType::PWO){
    G4double pwoDensity = 8.28*g/cm3;
    G4Material* pwo = new G4Material(newName, overrideDensity==0?pwoDensity:overrideDensity, 3, kStateSolid);
    pwo->AddElement(elements->getElement("Pb"), 1);
    pwo->AddElement(elements->getElement("W"), 1);
    pwo->AddElement(elements->getElement("O"), 4);
    return pwo;
  }
    else if (bmt == BaseMaterialType::SciGlassLight){
      G4double sciGlassDensity = 3.8*g/cm3;
      G4Material* sciGlass = new G4Material(newName, overrideDensity==0?sciGlassDensity:overrideDensity, 4, kStateSolid);
      sciGlass->AddElement(elements->getElement("Ba"), 0.3875);
      sciGlass->AddElement(elements->getElement("Gd"), 0.2146);
      sciGlass->AddElement(elements->getElement("Si"), 0.1369);
      sciGlass->AddElement(elements->getElement("O"),  0.2610);
      return sciGlass;
    }
  else if (bmt == BaseMaterialType::SciGlass){
    G4double sciGlassDensity = 4.22*g/cm3;
    G4Material* sciGlass = new G4Material(newName, overrideDensity==0?sciGlassDensity:overrideDensity, 4, kStateSolid);
    sciGlass->AddElement(elements->getElement("Ba"), 0.3875);
    sciGlass->AddElement(elements->getElement("Gd"), 0.2146);
    sciGlass->AddElement(elements->getElement("Si"), 0.1369);
    sciGlass->AddElement(elements->getElement("O"),  0.2610);
    return sciGlass;
  }
  else if (bmt == BaseMaterialType::CSGlass){
    G4double csGlassDensity = 4.9*g/cm3;
    G4Material* csGlass = new G4Material(newName, overrideDensity==0?csGlassDensity:overrideDensity, 4, kStateSolid);
    csGlass->AddElement(elements->getElement("Ba"), 0.3183);
    csGlass->AddElement(elements->getElement("Gd"), 0.1763);
    csGlass->AddElement(elements->getElement("Ge"), 0.2905);
    csGlass->AddElement(elements->getElement("O"),  0.2149);
    return csGlass;
  }
  return NULL;
}

G4MaterialPropertiesTable* Materials::getBaseMPT(BaseMaterialType bmt) {
  G4int SciGlasstoPWOLightYieldCoefficient = 10;
  G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
  if (bmt == BaseMaterialType::PWO){
    // Some of the GEANT4 optical parameters are outlined on pp.55 of
    // http://epubs.surrey.ac.uk/811039/1/Sion%20Richards-Thesis-Final-Version.pdf

    // PbWO4 ordinary refractive index taken from page 5 of
    // https://sci-hub.do/https://doi.org/10.1016/S0168-9002(96)01016-9
    // point 330, 2.8 can be added artificially
    // point 900, 2.21 can be added artificially
    // Researchers refer to this RI data as well: http://geb.uni-giessen.de/geb/volltexte/2013/10382/pdf/EissnerTobias_2013_11_18.pdf
    std::vector<G4double> refractiveIndex = {375, 2.452, 400, 2.393, 425, 2.353, 450, 2.323, 475, 2.301, 500, 2.284, 525, 2.270, 550, 2.259, 575, 2.250, 600, 2.242, 625, 2.236, 650, 2.230, 675, 2.225, 700, 2.222};
    G4MaterialPropertyVector* refractiveIndexMPV = nmToMPV(refractiveIndex);
    mpt->AddProperty("RINDEX", refractiveIndexMPV, true);

    // Older values used for simulation:
    // std::vector<G4double> wavelength         = { 400., 440., 480., 520., 560., 600.,  640., 680.}
    // std::vector<G4double> transmittancePbWO4 = { 0.33, 0.48, 0.62, 0.67, 0.68, 0.689, 0.69, 0.69};

    // PbWO4 measured longitudinal transmittance (I/I_0) of a crystal of 21.3 cm long (R. Zhu, 1996)
    // Digitized from the undoped sample # 728
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    // std::vector<G4double> transmittance = {360.2, 0, 374.3, 9.2, 387.3, 21.3, 402.4, 34.5, 427.6, 46.0, 454.0, 55.2, 483.4, 64.9, 519.0, 69.0, 579.2, 69.0, 636.3, 69.0, 702.7, 69.0, 755.7, 70.1, 797.6, 69.5};
    // G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double pbwo4BlockLength = 21.3*cm;

    // Digitized from below article for the sample befor irradiation (2001) by P.Yang
    // https://sci-hub.do/10.1016/S0022-0248(01)02385-5
    // std::vector<G4double> transmittance = {339.7, 0.0, 348.2, 1.4, 353.4, 9.9, 357.2, 18.9, 362.0, 31.1, 366.7, 40.7, 372.9, 47.1, 381.9, 52.9, 392.4, 57.0, 410.9, 62.0, 429.5, 64.8, 446.1, 66.3, 475.5, 67.9, 500.7, 69.3, 525.9, 70.1, 550.1, 70.9, 574.8, 71.2, 600.5, 71.6, 625.2, 71.9, 650.4, 72.1, 675.1, 72.3, 700.2, 72.4, 724.9, 72.4, 750.6, 72.6, 775.8, 72.3, 799.5, 73.1};
    // G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double transmittanceDistance = 22*cm;

    // Transmittance CRYTUR, provided by V.Berdnikov
    // std::vector<G4double> transmittance = {330, 0, 340, 1.566694, 350, 13.223613, 360, 45.441407, 370, 62.071972, 380, 67.140230, 390, 68.931434, 400, 69.772116, 410, 70.262557, 420, 70.646469, 430, 71.216135, 440, 71.501950, 450, 71.723380, 460, 71.975302, 470, 72.019692, 480, 72.192253, 490, 72.614533, 500, 72.789630, 510, 72.788232, 520, 72.912663, 530, 73.042799, 540, 73.235979, 550, 73.354468, 560, 73.453758, 570, 73.639631, 580, 73.695232, 590, 73.819757, 600, 73.957622, 610, 73.997395, 620, 74.067210, 630, 74.073362, 640, 74.278860, 650, 74.253225, 660, 74.346432, 670, 74.327692, 680, 74.598802, 690, 74.607074, 700, 74.542008, 710, 74.542790, 720, 74.641923, 730, 74.787570, 740, 74.585494, 750, 74.804944, 760, 74.843619, 770, 74.728880, 780, 74.860927, 790, 74.742771, 800, 74.925695};
    // G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double transmittanceDistance = 20*cm;

    // Transmittance SICCAS (S047), provided by V.Berdnikov
    // std::vector<G4double> transmittance = {340, 0., 350, 3.48074, 360, 29.3949, 370, 48.346, 380, 55.3979, 390, 58.6286, 400, 60.9593, 410, 62.6595, 420, 63.9743, 430, 64.9291, 440, 65.631, 450, 66.1062, 460, 66.7927, 470, 67.1896, 480, 67.3996, 490, 67.7139, 500, 68.053, 510, 68.3073, 520, 68.519, 530, 68.8111, 540, 68.9737, 550, 69.0832, 560, 69.4211, 570, 69.5605, 580, 69.6869, 590, 69.8266, 600, 69.9968, 610, 70.0129, 620, 70.1723, 630, 70.2061, 640, 70.3685, 650, 70.4813, 660, 70.4112, 670, 70.5207, 680, 70.6612, 690, 70.6313, 700, 70.6932, 710, 70.7846, 720, 70.7335, 730, 70.8962, 740, 70.934, 750, 70.9511, 760, 71.0478, 770, 71.0046, 780, 71.0511, 790, 71.0082, 800, 70.973};
    // G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double transmittanceDistance = 20*cm;

    // G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);

    // Absorption length PbWO4 - calculated https://sci-hub.do/https://doi.org/10.1016/0168-9002(93)91185-P
    // TODO: compare with https://sci-hub.do/https://doi.org/10.1016/S0168-9002(96)01016-9
    // TODO: compare with https://sci-hub.do/https://link.springer.com/article/10.1557/PROC-348-475
    // mpt->AddProperty("ABSLENGTH", absLengthMPV, true);

    // Energy spectrum for the fast scintillation component PbWO4 (arbitrary units)
    // PbWO4 emission spectrum (Berd sent paper): https://sci-hub.do/10.1088/1742-6596/293/1/012004
    // std::vector<G4double> digitizedEmissionSpectrum = {411.29848229342326, 10, 420.4047217537943, 14.606741573033702, 425.9696458684655, 21.68539325842697, 433.55817875210795, 30, 439.62900505902195, 37.64044943820225, 447.72344013490726, 44.49438202247191, 457.3355817875211, 50, 466.4418212478921, 51.79775280898876, 478.58347386172005, 49.7752808988764, 490.7251264755481, 42.92134831460674, 499.8313659359191, 35.1685393258427, 508.9376053962901, 27.752808988764045, 518.043844856661, 20.561797752809, 527.6559865092748, 13.932584269662925, 544.8566610455313, 7.752808988764045, 564.080944350759, 3.2584269662921344, 581.2816188870152, 2.0224719101123583};

    // Scintillation light yield - number of photons per unit energy deposition ~ 300 for SICCAS PbWO4
    // https://sci-hub.do/10.1016/j.phpro.2015.05.033 - says 300/MeV
    mpt->AddConstProperty("SCINTILLATIONYIELD", 300./MeV, true);

    // However we used 100/MeV to ensure correct PE output
    // Siccas Light Yield is 120/MeV? check here: https://sci-hub.ru/10.1109/23.603694
  }
  else if (bmt == BaseMaterialType::SciGlass){
    // Refractive index for SciGlass. T.Horn said use 1.58 for now.
    // std::vector<G4double> refractiveIndex = { 400, 1.58, 800, 1.58};

    // Refractive index used from 40% BaO, 60% SiO2
    // https://sci-hub.do/10.1016/S0022-3093(96)00609-6
    std::vector<G4double> refractiveIndex = { 297, 1.699, 310, 1.691, 322, 1.682, 348, 1.673, 379, 1.662, 429, 1.653, 511, 1.644, 617, 1.637, 718, 1.633, 1031, 1.626,  1389, 1.621};
    G4MaterialPropertyVector* refractiveIndexMPV = nmToMPV(refractiveIndex);
    mpt->AddProperty("RINDEX", refractiveIndexMPV, true);

    // Emission spectrum for SciGlass provided by T.Horn, normalized:
    std::vector<G4double> emissionSpectrum = {364, 0, 365, 0.000216196129458, 366, 0.00019669833529, 367, 0.000217343058527, 368, 0.000216769593993, 369, 0.000223651168405, 370, 0.000223077703871, 371, 0.00021906345213, 372, 0.000209314555046, 373, 0.000244869356177, 374, 0.000244295891643, 375, 0.000263793685811, 376, 0.000276409905568, 377, 0.000285585338118, 378, 0.000309670848561, 379, 0.000297054628805, 380, 0.000313111635767, 381, 0.000339491004349, 382, 0.000384794702564, 383, 0.00042493721997, 384, 0.000394543599648, 385, 0.000424363755436, 386, 0.000463932808307, 387, 0.000478269421667, 388, 0.000518985403607, 389, 0.000568876818098, 390, 0.00058493382506, 391, 0.000569450282632, 392, 0.000684143189507, 393, 0.000750091610959, 394, 0.000817186961481, 395, 0.000858476407956, 396, 0.001041411594421, 397, 0.00103739734268, 398, 0.001098184583324, 399, 0.001292589060476, 400, 0.001401547322007, 401, 0.001516240228881, 402, 0.001618890380534, 403, 0.00177315234028, 404, 0.001990495398807, 405, 0.002171136727135, 406, 0.002373569707768, 407, 0.002567400720386, 408, 0.002824886296319, 409, 0.002979148256066, 410, 0.003179287378562, 411, 0.003425303663808, 412, 0.0037338275833, 413, 0.003940274815674, 414, 0.004243064089823, 415, 0.004536677931422, 416, 0.004854377283464, 417, 0.005014947353088, 418, 0.005458235438158, 419, 0.005693929361786, 420, 0.005965178086544, 421, 0.006241587992111, 422, 0.006554126163344, 423, 0.00692343732348, 424, 0.007141353846542, 425, 0.007523854690969, 426, 0.007703349090227, 427, 0.007974597814985, 428, 0.008213159061284, 429, 0.008436236765155, 430, 0.008740172968373, 431, 0.008992497363497, 432, 0.00915421436219, 433, 0.009405965292779, 434, 0.009579725046694, 435, 0.009622161422238, 436, 0.00995419738764, 437, 0.010063155649171, 438, 0.010083226907874, 439, 0.010123942889814, 440, 0.010297129179195, 441, 0.010629165144596, 442, 0.01040149972445, 443, 0.010645222151559, 444, 0.01057984719464, 445, 0.010644648687024, 446, 0.010754180413089, 447, 0.01072149293463, 448, 0.010710597108477, 449, 0.010586728769053, 450, 0.010738123406127, 451, 0.010660132229452, 452, 0.010798910646771, 453, 0.010602212311481, 454, 0.010599344988809, 455, 0.010661279158521, 456, 0.010432466809306, 457, 0.010512751844119, 458, 0.010373399962266, 459, 0.010243796977498, 460, 0.010230607293207, 461, 0.01008666769508, 462, 0.010071757617186, 463, 0.009867604242949, 464, 0.009820006686596, 465, 0.009828035190078, 466, 0.009683522127416, 467, 0.009476501430507, 468, 0.00944668127472, 469, 0.009189769163321, 470, 0.009106616805837, 471, 0.009027478700094, 472, 0.008731571000357, 473, 0.008805547925291, 474, 0.008542901168549, 475, 0.008352510943137, 476, 0.008374302595443, 477, 0.008107068122426, 478, 0.00788341695402, 479, 0.007775032157024, 480, 0.007611594764728, 481, 0.007531309729915, 482, 0.007482565244494, 483, 0.007167733215123, 484, 0.007195259512773, 485, 0.007176335183139, 486, 0.006976769525177, 487, 0.006807024023003, 488, 0.006660790566738, 489, 0.006671112928357, 490, 0.006567889312169, 491, 0.006382660267567, 492, 0.006263379644418, 493, 0.006125174691634, 494, 0.006039728476012, 495, 0.005903243916832, 496, 0.00577192053846, 497, 0.005691062039114, 498, 0.005588985351995, 499, 0.005419239849821, 500, 0.005337234421406, 501, 0.00530626733655, 502, 0.005231716947081, 503, 0.005060251051304, 504, 0.004982833339164, 505, 0.00484864263812, 506, 0.004819969411402, 507, 0.004596891707531, 508, 0.004581408165103, 509, 0.00442886659896, 510, 0.004364065106576, 511, 0.004306145188604, 512, 0.004205788895089, 513, 0.004128944647483, 514, 0.004064716619633, 515, 0.003814112618112, 516, 0.003897264975596, 517, 0.003734974512369, 518, 0.003672466878122, 519, 0.003592755307844, 520, 0.003419569018464, 521, 0.003379426501058, 522, 0.003332975873774, 523, 0.003283657923818, 524, 0.003205093282608, 525, 0.00310301659549, 526, 0.003039935496709, 527, 0.003027892741487, 528, 0.002879938891619, 529, 0.002766392913813, 530, 0.002726250396407, 531, 0.002640804180786, 532, 0.002599514734311, 533, 0.002590339301761, 534, 0.002572561901196, 535, 0.002387906321128, 536, 0.002362673881615, 537, 0.002293284672956, 538, 0.00233055986769, 539, 0.002284109240406, 540, 0.002112643344629, 541, 0.002222748535228, 542, 0.00203407870342, 543, 0.001968130281967, 544, 0.001970424140104, 545, 0.001914224615736, 546, 0.001858025091367, 547, 0.00175078722344, 548, 0.001827631471045, 549, 0.001704336596155, 550, 0.001712365099637, 551, 0.001637241245634, 552, 0.001621757703206, 553, 0.001570719359647, 554, 0.001534017629447, 555, 0.001429647084191, 556, 0.001445130626619, 557, 0.001445130626619, 558, 0.00131667457092, 559, 0.001331011184279, 560, 0.001362551733669, 561, 0.001312660319179, 562, 0.001267930085498, 563, 0.001220905993679, 564, 0.001182483869876, 565, 0.001171588043723, 566, 0.001146929068745, 567, 0.001063203246727, 568, 0.001068364427536, 569, 0.001038544271749, 570, 0.000956538843334, 571, 0.001017326083977, 572, 0.000941055300905, 573, 0.000884855776537, 574, 0.000865357982368, 575, 0.000903206641637, 576, 0.000865357982368, 577, 0.000796542238244, 578, 0.000792527986503, 579, 0.000774750585937, 580, 0.000749518146425, 581, 0.000731167281325, 582, 0.000776470979541, 583, 0.000646294530238, 584, 0.000641133349429, 585, 0.000694465551125, 586, 0.000659484214528, 587, 0.000659484214528, 588, 0.000610739729107, 589, 0.000583213431457, 590, 0.000584360360526, 591, 0.000559127921013, 592, 0.000568303353563, 593, 0.000528734300692, 594, 0.000493752964095, 595, 0.000526440442554, 596, 0.000478842886201, 597, 0.000488591783285, 598, 0.000422069897298, 599, 0.000451316588551, 600, 0.000417482181023, 601, 0.000427231078108, 602, 0.000411174071145, 603, 0.000423790290901, 604, 0.000377913128152, 605, 0.000392823206045, 606, 0.000373325411877, 607, 0.00040257210313, 608, 0.00036587037293, 609, 0.00035669494038, 610, 0.000334903288074, 611, 0.000313111635767, 612, 0.000334329823539, 613, 0.000325154390989, 614, 0.000291319983461, 615, 0.000305656596821, 616, 0.00029246691253, 617, 0.000287879196255, 618, 0.000264367150346, 619, 0.000268954866621, 620, 0.000254618253261, 621, 0.000263793685811, 622, 0.000255191717796, 623, 0.000232826600955, 624, 0.000251177466055, 625, 0.000221930774802, 626, 0.000220783845733, 627, 0.000221357310268, 628, 0.00021504920039, 629, 0.000190390225412, 630, 0.000202432980634, 631, 0.00020071258703, 632, 0.000184655580068, 633, 0.000183508650999, 634, 0.000161716998693, 635, 0.000155982353349, 636, 0.000163437392296, 637, 0.000158849676021, 638, 0.000154261959746, 639, 0.000140498810921, 640, 0.000138778417318, 641, 0.000151394637074, 642, 0.00013247030744, 643, 0.000134190701043, 644, 0.000145659991731, 645, 0.000151968101609, 646, 0.000122147945821, 647, 0.000123868339424, 648, 0.000127882591165, 649, 0.000133617236509, 650, 0.000127882591165, 651, 0};
    // std::vector<G4double> emissionSpectrum = {364, 0, 365, 0.000216196129458, 375, 0.000263793685811, 385, 0.000424363755436, 395, 0.000858476407956, 405, 0.002171136727135, 415, 0.004536677931422, 425, 0.007523854690969, 435, 0.009622161422238, 445, 0.010644648687024, 455, 0.010661279158521, 465, 0.009828035190078, 475, 0.008352510943137, 485, 0.007176335183139, 495, 0.005903243916832, 505, 0.00484864263812, 515, 0.003814112618112, 525, 0.00310301659549, 535, 0.002387906321128, 545, 0.001914224615736, 555, 0.001429647084191, 565, 0.001171588043723, 575, 0.000903206641637, 585, 0.000694465551125, 595, 0.000526440442554, 605, 0.000392823206045, 615, 0.000305656596821, 625, 0.000221930774802, 635, 0.000155982353349, 645, 0.000151968101609, 650, 0.000127882591165, 651, 0};

    // change contents of vector
//    std::vector<G4double>::iterator p;
//    p = emissionSpectrum.begin();
//      while(p != emissionSpectrum.end()) {
//        *p = *p+100;
//        p++;
//      }
    // Tweak: try not normalized
    // for (G4double i : emissionSpectrum) i = i*100;
    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);
    mpt->AddProperty("SCINTILLATIONCOMPONENT1", fastComponent, true);
    mpt->AddProperty("SCINTILLATIONCOMPONENT2", slowComponent, true);

    // Overleaf French studies: test size samples have a light yield 11-35 (avg. 20) times that of PWO. We take ~ 10 times more
    mpt->AddConstProperty("SCINTILLATIONYIELD", SciGlasstoPWOLightYieldCoefficient*300./MeV, true);
  }
  else if (bmt == BaseMaterialType::CSGlass){
    // Refractive index for SciGlass. T.Horn said use 1.58 for now.
    // std::vector<G4double> refractiveIndex = { 400, 1.58, 800, 1.58};

    // Refractive index used from 40% BaO, 60% SiO2
    // https://sci-hub.do/10.1016/S0022-3093(96)00609-6
    std::vector<G4double> refractiveIndex = { 297, 1.699, 310, 1.691, 322, 1.682, 348, 1.673, 379, 1.662, 429, 1.653, 511, 1.644, 617, 1.637, 718, 1.633, 1031, 1.626,  1389, 1.621};
    G4MaterialPropertyVector* refractiveIndexMPV = nmToMPV(refractiveIndex);
    mpt->AddProperty("RINDEX", refractiveIndexMPV, true);

    // Emission spectrum for SciGlass provided by T.Horn, normalized:
    // Custom emission spectrum (added 0 values on the sides)
    std::vector<G4double> emissionSpectrum = {449, 0.0, 450, 0.002661594724972, 451, 0.002369886292445, 452, 0.002279828655557, 453, 0.002357160756797, 454, 0.002226968738253, 455, 0.00207328342313, 456, 0.002014550181682, 457, 0.002002803533392, 458, 0.002018465731111, 459, 0.001931344756296, 460, 0.001950922503446, 461, 0.00188729482521, 462, 0.001947985841373, 463, 0.00189512592407, 464, 0.001897083698785, 465, 0.001816814935472, 466, 0.001857928204486, 467, 0.001962669151735, 468, 0.002079156747275, 469, 0.001932323643654, 470, 0.001841287119409, 471, 0.001629847450194, 472, 0.001630826337552, 473, 0.001821709372259, 474, 0.001553494236311, 475, 0.0016043963789, 476, 0.001620058576619, 477, 0.001497697656935, 478, 0.001526085390302, 479, 0.00141840778098, 480, 0.001433091091342, 481, 0.001566219771958, 482, 0.001424281105125, 483, 0.00149965543165, 484, 0.001467352148854, 485, 0.001404703357975, 486, 0.00143015442927, 487, 0.001348906778599, 488, 0.00132541348202, 489, 0.001357716764816, 490, 0.001443858852274, 491, 0.001421344443052, 492, 0.00148790878336, 493, 0.001512380967297, 494, 0.001508465417867, 495, 0.001401766695903, 496, 0.001380231174038, 497, 0.00141449223155, 498, 0.00130192018544, 499, 0.0013949144844, 500, 0.001291152424508, 501, 0.001285279100363, 502, 0.001274511339431, 503, 0.001346949003884, 504, 0.001286257987721, 505, 0.001269616902644, 506, 0.001294089086581, 507, 0.001238292507205, 508, 0.001259828029069, 509, 0.001320519045232, 510, 0.00121675698534, 511, 0.001352822328029, 512, 0.001278426888861, 513, 0.001288215762436, 514, 0.001238292507205, 515, 0.001213820323268, 516, 0.001223609196843, 517, 0.001278426888861, 518, 0.001235355845132, 519, 0.001322476819947, 520, 0.001213820323268, 521, 0.00132541348202, 522, 0.001360653426889, 523, 0.001246123606064, 524, 0.001268638015286, 525, 0.001276469114146, 526, 0.001276469114146, 527, 0.001361632314246, 528, 0.00131366683373, 529, 0.001287236875078, 530, 0.001251996930209, 531, 0.001287236875078, 532, 0.001323455707305, 533, 0.001342054567097, 534, 0.001218714760055, 535, 0.001163897068037, 536, 0.001230461408345, 537, 0.001295067973938, 538, 0.001270595790001, 539, 0.001247102493422, 540, 0.001323455707305, 541, 0.001260806916427, 542, 0.001379252286681, 543, 0.00140666113269, 544, 0.001532937601804, 545, 0.001488887670718, 546, 0.001423302217767, 547, 0.001571114208746, 548, 0.001547620912166, 549, 0.001623974126049, 550, 0.00158481863175, 551, 0.001731651735372, 552, 0.001878484838993, 553, 0.002035106816188, 554, 0.002302343064779, 555, 0.002421767322391, 556, 0.002755567911289, 557, 0.003086431838116, 558, 0.003537698909911, 559, 0.003835280666583, 560, 0.004556720649041, 561, 0.006647624044606, 562, 0.009690984838993, 563, 0.01150192645032, 564, 0.010942981769202, 565, 0.008264745959153, 566, 0.006972614647287, 567, 0.006193420310738, 568, 0.006193420310738, 569, 0.006384303345445, 570, 0.006459677671971, 571, 0.006329485653427, 572, 0.005580636824959, 573, 0.004914014534519, 574, 0.004367795389049, 575, 0.00395274714948, 576, 0.00347211345696, 577, 0.003380098045358, 578, 0.003159848389926, 579, 0.003024761934595, 580, 0.003031614146097, 581, 0.002947429833354, 582, 0.00280940671595, 583, 0.002740884600927, 584, 0.002927852086205, 585, 0.002826047801027, 586, 0.002917084325273, 587, 0.003143207304849, 588, 0.003341921438416, 589, 0.003662996491668, 590, 0.004124052437038, 591, 0.004641883849142, 592, 0.005077488723218, 593, 0.005619792319258, 594, 0.006873747024182, 595, 0.00761084920436, 596, 0.008925494925448, 597, 0.012198894248841, 598, 0.017030682245333, 599, 0.02249581036211, 600, 0.026223413419371, 601, 0.025178940608946, 602, 0.022193334168651, 603, 0.019057957962661, 604, 0.016301411164015, 605, 0.015392024808921, 606, 0.015084654178674, 607, 0.014759663575993, 608, 0.01430741761684, 609, 0.013605555381531, 610, 0.012847896566846, 611, 0.011746648289688, 612, 0.01075014095978, 613, 0.009520658438792, 614, 0.008820753978198, 615, 0.007582461470994, 616, 0.006759217203358, 617, 0.005986875078311, 618, 0.005099024245082, 619, 0.004147545733617, 620, 0.003814724032076, 621, 0.003101115148478, 622, 0.002734032389425, 623, 0.002505951635133, 624, 0.00225927202105, 625, 0.002152573299085, 626, 0.00208894562085, 627, 0.002120270016289, 628, 0.00207719897256, 629, 0.002118312241574, 630, 0.002078177859917, 631, 0.002164319947375, 632, 0.002233820949756, 633, 0.002560769327152, 634, 0.002522592720211, 635, 0.00271249686756, 636, 0.002924915424132, 637, 0.003201940546297, 638, 0.00348777565468, 639, 0.00394491605062, 640, 0.004278716639519, 641, 0.004378563149981, 642, 0.004601749467485, 643, 0.005172440796893, 644, 0.00601036837489, 645, 0.007221252036086, 646, 0.008409621288059, 647, 0.009547088397444, 648, 0.009747760305726, 649, 0.00913008238316, 650, 0.007974995301341, 651, 0.007178180992357, 652, 0.006523305350207, 653, 0.006444015474251, 654, 0.006284456834983, 655, 0.006042671657687, 656, 0.005862556383912, 657, 0.005451423693773, 658, 0.004916951196592, 659, 0.00471236373888, 660, 0.004273822202731, 661, 0.003965472685127, 662, 0.003617967673224, 663, 0.003258716013031, 664, 0.002819195589525, 665, 0.002629291442175, 666, 0.002317026375141, 667, 0.002106565593284, 668, 0.001959732489663, 669, 0.001769828342313, 670, 0.001637678549054, 671, 0.001504549868438, 672, 0.001415471118907, 673, 0.001268638015286, 674, 0.001293110199223, 675, 0.001211862548553, 676, 0.001145298208245, 677, 0.001205989224408, 678, 0.001089501628869, 679, 0.001032726162135, 680, 0.001074818318506, 681, 0.001087543854154, 682, 0.001117889362235, 683, 0.001048388359855, 684, 0.001133551559955, 685, 0.001091459403584, 686, 0.001095374953013, 687, 0.001151171532389, 688, 0.001138445996742, 689, 0.001203052562336, 690, 0.001148234870317, 691, 0.001204031449693, 692, 0.001207946999123, 693, 0.001159981518607, 694, 0.001206968111765, 695, 0.001200115900263, 696, 0.001247102493422, 697, 0.001249060268137, 698, 0.001251018042852, 699, 0.001211862548553, 700, 0.001213820323268, 701, 0.00130192018544, 702, 0.001322476819947, 703, 0.001300941298083, 704, 0.001434069978699, 705, 0.001413513344192, 706, 0.001477141022428, 707, 0.001574050870818, 708, 0.001459521049994, 709, 0.001565240884601, 710, 0.001516296516727, 711, 0.001575029758176, 712, 0.001517275404085, 713, 0.001546642024809, 714, 0.001506507643152, 715, 0.001387083385541, 716, 0.001445816626989, 717, 0.001408618907405, 718, 0.001351843440672, 719, 0.001408618907405, 720, 0.001346949003884, 721, 0.001345970116527, 722, 0.001387083385541, 723, 0.001276469114146, 724, 0.001280384663576, 725, 0.001260806916427, 726, 0.001185432589901, 727, 0.001164875955394, 728, 0.001199137012906, 729, 0.00114725598296, 730, 0.001129636010525, 731, 0.001093417178298, 732, 0.001205989224408, 733, 0.001067966107004, 734, 0.001096353840371, 735, 0.001081670530009, 736, 0.001027831725348, 737, 0.001114952700163, 738, 0.001035662824208, 739, 0.00111201603809, 740, 0.001055240571357, 741, 0.000990634005764, 742, 0.001015106189701, 743, 0.00101902173913, 744, 0.001020000626488, 745, 0.00102293728856, 746, 0.001013148414986, 747, 0.001027831725348, 748, 0.001045451697782, 749, 0.001064050557574, 750, 0.001060135008144, 751, 0};

    // Avoiding the exceptions: trying non-normalized emission (not worked)
    // Avoiding the exceptions: trying extend emission spectrum to the left (not worked)
    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);
    mpt->AddProperty("SCINTILLATIONCOMPONENT1", fastComponent, true);
    mpt->AddProperty("SCINTILLATIONCOMPONENT2", slowComponent, true);


    // Overleaf French studies: test size samples have a light yield 11-35 (avg. 20) times that of PWO. We take ~ 10 times more
    mpt->AddConstProperty("SCINTILLATIONYIELD", SciGlasstoPWOLightYieldCoefficient*300./MeV, true);
  }

  // Fluctuation of mean number of optical photons produces for the step
  mpt->AddConstProperty("RESOLUTIONSCALE", 1.0, true);

  mpt->AddConstProperty("SCINTILLATIONTIMECONSTANT1", 13*ns, true);
  mpt->AddConstProperty("SCINTILLATIONTIMECONSTANT2", 412*ns, true);
  mpt->AddConstProperty("SCINTILLATIONYIELD1", 0.9);
  mpt->AddConstProperty("SCINTILLATIONYIELD2", 0.1);

  // Scintillation rise time
  mpt->AddConstProperty("SCINTILLATIONRISETIME1", 10*ps, true);
  mpt->AddConstProperty("SCINTILLATIONRISETIME2", 50*ps, true);
  return mpt;
}

// Automatically generate macros for emission
void Materials::generateEmissionMacro(G4Material* material){
  G4MaterialPropertiesTable* mpt = material->GetMaterialPropertiesTable();

  // TODO: sum vectors from sfast and slow components
  G4MaterialPropertyVector* mpv = mpt->GetProperty("SCINTILLATIONCOMPONENT1");

  G4String emissionFilename = "macros/gps-op-emission-" + material->GetName() + ".mac";

  std::ofstream myfile;
  myfile.open(emissionFilename.c_str());
  myfile << "# Auto-generated: OP Emission for " << material->GetName() << std::endl;
  myfile << "# http://hurel.hanyang.ac.kr/Geant4/Geant4_GPS/reat.space.qinetiq.com/gps/examples/examples.html" << std::endl;
  myfile << std::endl;
  myfile << "/gps/particle opticalphoton" << std::endl;
  myfile << "/gps/pos/type Point" << std::endl;
  myfile << "/gps/ang/type iso" << std::endl;
  myfile << std::endl;
  myfile << "# In example #18" << std::endl;

  // These line for user-defined histogram
  // myfile << "/gps/ene/type User" << std::endl;
  // myfile << "/gps/hist/type energy" << std::endl;

  // These lines for arbitrary point-wise energy function with linear interpolation
  myfile << "/gps/ene/type Arb" << std::endl;
  myfile << "/gps/hist/type arb" << std::endl;

  myfile << std::endl;
  for (int i = 0; i<(int)mpv->GetVectorLength(); i++){
    G4double e = mpv->Energy(i);
    G4bool b = true;
    G4double value = mpv->GetValue(e, b);
    myfile << "/gps/hist/point " << e << " " << value << std::endl;
  }
  myfile << std::endl;
  myfile << "/gps/hist/inter Lin" << std::endl;

  myfile.close();
}
