//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file SteppingAction.cc
/// \brief Implementation of the B1::SteppingAction class

#include "SteppingAction.hh"
#include "EventAction.hh"
#include "DetectorConstruction.hh"
#include "detectors/AbsDetector.hh"
#include "Utils.hh"

#include <G4Step.hh>
#include <G4Event.hh>
#include <G4RunManager.hh>
#include <G4LogicalVolume.hh>
#include <G4OpticalPhoton.hh>

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SteppingAction::SteppingAction(EventAction *eventAction) :
    fEventAction(eventAction) {
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SteppingAction::~SteppingAction() {
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void SteppingAction::UserSteppingAction(const G4Step *step) {
  // Set scoring volume if not set previously
  if (!fScoringVolume) {
    const DetectorConstruction *detConstruction =
        static_cast<const DetectorConstruction*>(G4RunManager::GetRunManager()->GetUserDetectorConstruction());
    fScoringVolume = detConstruction->GetScoringVolume();
  }

  // Get volume of the current step
  G4LogicalVolume *volume = step->GetPreStepPoint()->GetTouchableHandle()->GetVolume()->GetLogicalVolume();

  // Check if we are in scoring volume
  if (volume != fScoringVolume)
    return;

  // Ensure particle type is optical photon
  if (step->GetTrack()->GetDefinition() != G4OpticalPhoton::Definition()) return;

  // Obtain number of PE generated by this optical photon
  // For better time complexity we use floating point of PE instead of generating a random number for each optical photon event
  G4double waveLength = Utils::getWavelength(step->GetTrack()); // in nm
  G4double efficiency = Utils::getDetector()->getEfficiency(waveLength); //  in percent
  G4double pe = efficiency/100.;

  // Collect number of photo-electrons produced in this step
  // G4double edepStep = step->GetTotalEnergyDeposit();
  fEventAction->AddNPE(pe);

  // Terminate optical photon track
  step->GetTrack()->SetTrackStatus(fStopAndKill);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
